{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":47010,"databundleVersionId":5031613,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Introduction\n\n**Description**\n>Given survey results in the past 3 days in a specific state in U.S., then predict the percentage of new tested positive cases in the 3rd day.\n\n\n**Evaluation Matrix** : MSE\n\n**Features**\n\n- id (1)\n- States (35, encoded to one-hot vectors)\n- COVID-like illness (5) : cli, ili ...\n- Behavior indicators (5) : wearing_mask, shop_indoors, restaurant_indoors, public_transit ...\n- Belief indicators (2) : belief_mask_effective, belief_distancing_effective\n- Mental indicator (2) : worried_catch_covid, worried_finance.\n- Environmental indicators (3) : other_masked_public, other_distanced_public ...\n- Tested Positive Cases (1) : this is what we want to predict\n\n","metadata":{}},{"cell_type":"markdown","source":"# Objectives\n\n- Solve a regression problem with Sklearn.\n- Solve a regression problem with deep neural networks (DNN).\n","metadata":{}},{"cell_type":"markdown","source":"# Library","metadata":{}},{"cell_type":"code","source":"!pip install chardet\n!pip install plotly","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:53:00.585937Z","iopub.execute_input":"2024-07-03T08:53:00.586443Z","iopub.status.idle":"2024-07-03T08:53:33.555737Z","shell.execute_reply.started":"2024-07-03T08:53:00.586390Z","shell.execute_reply":"2024-07-03T08:53:33.554223Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting chardet\n  Downloading chardet-5.2.0-py3-none-any.whl.metadata (3.4 kB)\nDownloading chardet-5.2.0-py3-none-any.whl (199 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.4/199.4 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: chardet\nSuccessfully installed chardet-5.2.0\nRequirement already satisfied: plotly in /opt/conda/lib/python3.10/site-packages (5.18.0)\nRequirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from plotly) (8.2.3)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from plotly) (21.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->plotly) (3.1.1)\n","output_type":"stream"}]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom pathlib import Path\nimport os\nimport chardet\nimport requests\nimport itertools\nfrom itertools import cycle\nimport pickle\n\nimport time\n\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:53:33.558406Z","iopub.execute_input":"2024-07-03T08:53:33.558863Z","iopub.status.idle":"2024-07-03T08:53:34.635335Z","shell.execute_reply.started":"2024-07-03T08:53:33.558822Z","shell.execute_reply":"2024-07-03T08:53:34.633964Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n%matplotlib inline\n\n\n# Seaborn\nimport seaborn as sns\nsns.set(style='darkgrid', font_scale=1.4)\n\n\n# Plotly\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\n#mlxtend\nfrom mlxtend.plotting import scatterplotmatrix\nfrom mlxtend.plotting import heatmap","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:53:34.636881Z","iopub.execute_input":"2024-07-03T08:53:34.637382Z","iopub.status.idle":"2024-07-03T08:53:37.009294Z","shell.execute_reply.started":"2024-07-03T08:53:34.637349Z","shell.execute_reply":"2024-07-03T08:53:37.008140Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import eli5\nfrom eli5.sklearn import PermutationImportance\nfrom sklearn.utils import resample\n\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\n#Feature selection\nfrom sklearn.feature_selection import mutual_info_classif, SelectFromModel, RFE, RFECV, SelectKBest, chi2\n\n#Model selection\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, RandomizedSearchCV, cross_val_score\n\n#Model pipe\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\n\n#Preprocessing\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder, LabelEncoder, label_binarize\nimport category_encoders as ce\nfrom category_encoders import MEstimateEncoder\nfrom imblearn.over_sampling import SMOTE\n\n#Model\nimport xgboost as xgb\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n#Evalution\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, roc_curve, auc, precision_recall_curve, average_precision_score\nfrom sklearn.tree import plot_tree ","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:53:37.011844Z","iopub.execute_input":"2024-07-03T08:53:37.012431Z","iopub.status.idle":"2024-07-03T08:53:55.323350Z","shell.execute_reply.started":"2024-07-03T08:53:37.012397Z","shell.execute_reply":"2024-07-03T08:53:55.322287Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"2024-07-03 08:53:41.649047: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-03 08:53:41.649210: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-03 08:53:41.835784: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load Data","metadata":{}},{"cell_type":"code","source":"class LoadingFile():\n    def __init__(self, path, name, url=None):\n        self.path = path\n        self.name = name\n        self.url = url\n\n    def size(self):\n        kib = 1024\n        size = os.path.getsize(Path(self.path))\n        print(f\"{self.name} size: {np.round(size / kib)} Kib\")\n\n    def Encoding_predict(self):\n        file_path = Path(self.path)\n        with open(file_path, 'rb') as f:\n            contents = f.read()\n\n        encoding_info = chardet.detect(contents)\n\n        detected_encoding = encoding_info['encoding']\n        confidence = encoding_info['confidence']\n\n        print(f\"File name: {self.name:<25}\\nEncoding: {detected_encoding:<10}Confidence: {confidence}\")\n\n\n    def download_data(self):\n        data_path = Path(self.path)\n        if data_path.is_dir():\n            print(f\"{data_path} directory exist.\")\n        else:\n            print(f\"Creating {data_path}\")\n            data_path.mkdir(parents=True, exist_ok=True)\n\n        if (data_path / Path(self.name)).exists():\n            print(f\"{self.name} already exist\")\n            pass\n        else:\n            with open(data_path / self.name, \"wb\") as f:\n                req = requests.get(self.url)\n                print(\"Downloading data...\")\n                f.write(req.content)\n                print(\"Done!\")\nname=[]\npath = []\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        name.append(filename)\n        path.append(os.path.join(dirname, filename))\n\n        print(f\"Path: {dirname} | Data_Name: {filename}\")\n        size = LoadingFile(os.path.join(dirname, filename), filename).size()\n        print()","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:53:55.324986Z","iopub.execute_input":"2024-07-03T08:53:55.325918Z","iopub.status.idle":"2024-07-03T08:53:55.353755Z","shell.execute_reply.started":"2024-07-03T08:53:55.325880Z","shell.execute_reply":"2024-07-03T08:53:55.351884Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Path: /kaggle/input/ml2023spring-hw1 | Data_Name: covid_train.csv\ncovid_train.csv size: 2112.0 Kib\n\nPath: /kaggle/input/ml2023spring-hw1 | Data_Name: covid_test.csv\ncovid_test.csv size: 623.0 Kib\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# load data one for analysis another for analysis\ntrain = pd.read_csv(path[0])\ntest = pd.read_csv(path[1])\nprint(f\"Train Shape : {train.shape}\\nTest Shape : {test.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:54:05.454875Z","iopub.execute_input":"2024-07-03T08:54:05.455339Z","iopub.status.idle":"2024-07-03T08:54:05.615768Z","shell.execute_reply.started":"2024-07-03T08:54:05.455306Z","shell.execute_reply":"2024-07-03T08:54:05.614442Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Train Shape : (3009, 89)\nTest Shape : (997, 88)\n","output_type":"stream"}]},{"cell_type":"code","source":"train.info(memory_usage=\"deep\")","metadata":{"execution":{"iopub.status.busy":"2024-07-03T08:54:07.304539Z","iopub.execute_input":"2024-07-03T08:54:07.304981Z","iopub.status.idle":"2024-07-03T08:54:07.344289Z","shell.execute_reply.started":"2024-07-03T08:54:07.304949Z","shell.execute_reply":"2024-07-03T08:54:07.342850Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3009 entries, 0 to 3008\nData columns (total 89 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   id                              3009 non-null   int64  \n 1   AL                              3009 non-null   float64\n 2   AZ                              3009 non-null   float64\n 3   CA                              3009 non-null   float64\n 4   CO                              3009 non-null   float64\n 5   CT                              3009 non-null   float64\n 6   FL                              3009 non-null   float64\n 7   GA                              3009 non-null   float64\n 8   IL                              3009 non-null   float64\n 9   IN                              3009 non-null   float64\n 10  IA                              3009 non-null   float64\n 11  KS                              3009 non-null   float64\n 12  KY                              3009 non-null   float64\n 13  LA                              3009 non-null   float64\n 14  ME                              3009 non-null   float64\n 15  MD                              3009 non-null   float64\n 16  MA                              3009 non-null   float64\n 17  MI                              3009 non-null   float64\n 18  MN                              3009 non-null   float64\n 19  MO                              3009 non-null   float64\n 20  NJ                              3009 non-null   float64\n 21  NM                              3009 non-null   float64\n 22  NY                              3009 non-null   float64\n 23  NC                              3009 non-null   float64\n 24  OH                              3009 non-null   float64\n 25  OK                              3009 non-null   float64\n 26  OR                              3009 non-null   float64\n 27  PA                              3009 non-null   float64\n 28  SC                              3009 non-null   float64\n 29  TN                              3009 non-null   float64\n 30  TX                              3009 non-null   float64\n 31  VA                              3009 non-null   float64\n 32  WA                              3009 non-null   float64\n 33  WV                              3009 non-null   float64\n 34  WI                              3009 non-null   float64\n 35  cli                             3009 non-null   float64\n 36  ili                             3009 non-null   float64\n 37  wnohh_cmnty_cli                 3009 non-null   float64\n 38  wbelief_masking_effective       3009 non-null   float64\n 39  wbelief_distancing_effective    3009 non-null   float64\n 40  wcovid_vaccinated_friends       3009 non-null   float64\n 41  wlarge_event_indoors            3009 non-null   float64\n 42  wothers_masked_public           3009 non-null   float64\n 43  wothers_distanced_public        3009 non-null   float64\n 44  wshop_indoors                   3009 non-null   float64\n 45  wrestaurant_indoors             3009 non-null   float64\n 46  wworried_catch_covid            3009 non-null   float64\n 47  hh_cmnty_cli                    3009 non-null   float64\n 48  nohh_cmnty_cli                  3009 non-null   float64\n 49  wearing_mask_7d                 3009 non-null   float64\n 50  public_transit                  3009 non-null   float64\n 51  worried_finances                3009 non-null   float64\n 52  tested_positive                 3009 non-null   float64\n 53  cli.1                           3009 non-null   float64\n 54  ili.1                           3009 non-null   float64\n 55  wnohh_cmnty_cli.1               3009 non-null   float64\n 56  wbelief_masking_effective.1     3009 non-null   float64\n 57  wbelief_distancing_effective.1  3009 non-null   float64\n 58  wcovid_vaccinated_friends.1     3009 non-null   float64\n 59  wlarge_event_indoors.1          3009 non-null   float64\n 60  wothers_masked_public.1         3009 non-null   float64\n 61  wothers_distanced_public.1      3009 non-null   float64\n 62  wshop_indoors.1                 3009 non-null   float64\n 63  wrestaurant_indoors.1           3009 non-null   float64\n 64  wworried_catch_covid.1          3009 non-null   float64\n 65  hh_cmnty_cli.1                  3009 non-null   float64\n 66  nohh_cmnty_cli.1                3009 non-null   float64\n 67  wearing_mask_7d.1               3009 non-null   float64\n 68  public_transit.1                3009 non-null   float64\n 69  worried_finances.1              3009 non-null   float64\n 70  tested_positive.1               3009 non-null   float64\n 71  cli.2                           3009 non-null   float64\n 72  ili.2                           3009 non-null   float64\n 73  wnohh_cmnty_cli.2               3009 non-null   float64\n 74  wbelief_masking_effective.2     3009 non-null   float64\n 75  wbelief_distancing_effective.2  3009 non-null   float64\n 76  wcovid_vaccinated_friends.2     3009 non-null   float64\n 77  wlarge_event_indoors.2          3009 non-null   float64\n 78  wothers_masked_public.2         3009 non-null   float64\n 79  wothers_distanced_public.2      3009 non-null   float64\n 80  wshop_indoors.2                 3009 non-null   float64\n 81  wrestaurant_indoors.2           3009 non-null   float64\n 82  wworried_catch_covid.2          3009 non-null   float64\n 83  hh_cmnty_cli.2                  3009 non-null   float64\n 84  nohh_cmnty_cli.2                3009 non-null   float64\n 85  wearing_mask_7d.2               3009 non-null   float64\n 86  public_transit.2                3009 non-null   float64\n 87  worried_finances.2              3009 non-null   float64\n 88  tested_positive.2               3009 non-null   float64\ndtypes: float64(88), int64(1)\nmemory usage: 2.0 MB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"*Notes*\n\n- The memory usage is higher when looking at the Test set, but it's only 237.5MB, so it's still manageable.\n- The categorical features in the data have all been encoded using one-hot encoding.\n- There's three days' data in it.","metadata":{}},{"cell_type":"markdown","source":"**Check Duplicative Data**","metadata":{}},{"cell_type":"code","source":"print(f'Duplicates in train set: {train.duplicated().sum()}, ({np.round(100*train.duplicated().sum()/len(train),1)}%)')\nprint('')\nprint(f'Duplicates in test set: {test.duplicated().sum()}, ({np.round(100*test.duplicated().sum()/len(test),1)}%)')","metadata":{"execution":{"iopub.status.busy":"2024-07-03T09:06:17.625128Z","iopub.execute_input":"2024-07-03T09:06:17.625764Z","iopub.status.idle":"2024-07-03T09:06:17.710683Z","shell.execute_reply.started":"2024-07-03T09:06:17.625715Z","shell.execute_reply":"2024-07-03T09:06:17.709109Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Duplicates in train set: 0, (0.0%)\n\nDuplicates in test set: 0, (0.0%)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Great! No Duplicate.","metadata":{}},{"cell_type":"markdown","source":"**Check Missing Data**","metadata":{}},{"cell_type":"code","source":"print('TRAIN SET MISSING VALUES:')\nprint(sum(train.isna().values))\nprint('')\nprint('TEST SET MISSING VALUES:')\nprint(sum(test.isna().values))","metadata":{"execution":{"iopub.status.busy":"2024-07-03T09:08:47.704973Z","iopub.execute_input":"2024-07-03T09:08:47.705813Z","iopub.status.idle":"2024-07-03T09:08:47.727301Z","shell.execute_reply.started":"2024-07-03T09:08:47.705774Z","shell.execute_reply":"2024-07-03T09:08:47.725903Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"TRAIN SET MISSING VALUES:\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n\nTEST SET MISSING VALUES:\n[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Great! No Missing.","metadata":{}},{"cell_type":"markdown","source":"**Cardinality of features**","metadata":{}},{"cell_type":"code","source":"print(train.nunique().index)\nprint(train.nunique().values)","metadata":{"execution":{"iopub.status.busy":"2024-07-03T09:11:40.375648Z","iopub.execute_input":"2024-07-03T09:11:40.377391Z","iopub.status.idle":"2024-07-03T09:11:40.425208Z","shell.execute_reply.started":"2024-07-03T09:11:40.377335Z","shell.execute_reply":"2024-07-03T09:11:40.423966Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"Index(['id', 'AL', 'AZ', 'CA', 'CO', 'CT', 'FL', 'GA', 'IL', 'IN', 'IA', 'KS',\n       'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MO', 'NJ', 'NM', 'NY', 'NC',\n       'OH', 'OK', 'OR', 'PA', 'SC', 'TN', 'TX', 'VA', 'WA', 'WV', 'WI', 'cli',\n       'ili', 'wnohh_cmnty_cli', 'wbelief_masking_effective',\n       'wbelief_distancing_effective', 'wcovid_vaccinated_friends',\n       'wlarge_event_indoors', 'wothers_masked_public',\n       'wothers_distanced_public', 'wshop_indoors', 'wrestaurant_indoors',\n       'wworried_catch_covid', 'hh_cmnty_cli', 'nohh_cmnty_cli',\n       'wearing_mask_7d', 'public_transit', 'worried_finances',\n       'tested_positive', 'cli.1', 'ili.1', 'wnohh_cmnty_cli.1',\n       'wbelief_masking_effective.1', 'wbelief_distancing_effective.1',\n       'wcovid_vaccinated_friends.1', 'wlarge_event_indoors.1',\n       'wothers_masked_public.1', 'wothers_distanced_public.1',\n       'wshop_indoors.1', 'wrestaurant_indoors.1', 'wworried_catch_covid.1',\n       'hh_cmnty_cli.1', 'nohh_cmnty_cli.1', 'wearing_mask_7d.1',\n       'public_transit.1', 'worried_finances.1', 'tested_positive.1', 'cli.2',\n       'ili.2', 'wnohh_cmnty_cli.2', 'wbelief_masking_effective.2',\n       'wbelief_distancing_effective.2', 'wcovid_vaccinated_friends.2',\n       'wlarge_event_indoors.2', 'wothers_masked_public.2',\n       'wothers_distanced_public.2', 'wshop_indoors.2',\n       'wrestaurant_indoors.2', 'wworried_catch_covid.2', 'hh_cmnty_cli.2',\n       'nohh_cmnty_cli.2', 'wearing_mask_7d.2', 'public_transit.2',\n       'worried_finances.2', 'tested_positive.2'],\n      dtype='object')\n[3009    2    2    2    2    2    2    2    2    2    2    2    2    2\n    2    2    2    2    2    2    2    2    2    2    2    2    2    2\n    2    2    2    2    2    2    2 3009 3009 3009 3009 3009 3009 3009\n 3009 3009 3009 3009 3009 3009 3009 3009 3009 3007 2998 3009 3009 3009\n 3009 3009 3009 3009 3009 3009 3009 3009 3009 3009 3009 3009 3009 3007\n 2998 3009 3009 3009 3009 3009 3009 3009 3009 3009 3009 3009 3009 3009\n 3009 3009 3009 3007 2998]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"*Notes*\n\n- States' features is one hot, so cardinality is 2.\n- Except states, other features are all numeric.","metadata":{}},{"cell_type":"markdown","source":"**Set feature names**","metadata":{}},{"cell_type":"code","source":"all_feature_names = list(train.columns)\ncategorial_names = list(all_feature_names[1:35])\nnumerical_names = [col for col in train.columns[35:] if col.split(\".\")[0] != \"tested_positive\"]\ntarget = [col for col in train.columns if col.split(\".\")[0] == \"tested_positive\"]\n\nset(all_feature_names).difference(set([\"id\"]+categorial_names+numerical_names+target)) # Check we really assign every features to variable","metadata":{"execution":{"iopub.status.busy":"2024-07-03T09:26:52.895683Z","iopub.execute_input":"2024-07-03T09:26:52.896193Z","iopub.status.idle":"2024-07-03T09:26:52.907580Z","shell.execute_reply.started":"2024-07-03T09:26:52.896156Z","shell.execute_reply":"2024-07-03T09:26:52.906132Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"set()"},"metadata":{}}]},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"markdown","source":"**Target distribution**","metadata":{}},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-07-03T09:28:29.774046Z","iopub.execute_input":"2024-07-03T09:28:29.774447Z","iopub.status.idle":"2024-07-03T09:28:29.796889Z","shell.execute_reply.started":"2024-07-03T09:28:29.774415Z","shell.execute_reply":"2024-07-03T09:28:29.795650Z"},"trusted":true},"execution_count":55,"outputs":[{"execution_count":55,"output_type":"execute_result","data":{"text/plain":"      tested_positive  tested_positive.1  tested_positive.2\n0           20.149280          18.876155          18.490787\n1           18.876155          18.490787          16.329253\n2           18.490787          16.329253          16.522931\n3           16.329253          16.522931          15.578501\n4           16.522931          15.578501          14.171920\n...               ...                ...                ...\n3004         6.549525           5.910541           6.487310\n3005         5.910541           6.487310           6.112827\n3006         6.487310           6.112827           6.151394\n3007         6.112827           6.151394           7.165580\n3008         6.151394           7.165580          10.535087\n\n[3009 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tested_positive</th>\n      <th>tested_positive.1</th>\n      <th>tested_positive.2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20.149280</td>\n      <td>18.876155</td>\n      <td>18.490787</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18.876155</td>\n      <td>18.490787</td>\n      <td>16.329253</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.490787</td>\n      <td>16.329253</td>\n      <td>16.522931</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.329253</td>\n      <td>16.522931</td>\n      <td>15.578501</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>16.522931</td>\n      <td>15.578501</td>\n      <td>14.171920</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3004</th>\n      <td>6.549525</td>\n      <td>5.910541</td>\n      <td>6.487310</td>\n    </tr>\n    <tr>\n      <th>3005</th>\n      <td>5.910541</td>\n      <td>6.487310</td>\n      <td>6.112827</td>\n    </tr>\n    <tr>\n      <th>3006</th>\n      <td>6.487310</td>\n      <td>6.112827</td>\n      <td>6.151394</td>\n    </tr>\n    <tr>\n      <th>3007</th>\n      <td>6.112827</td>\n      <td>6.151394</td>\n      <td>7.165580</td>\n    </tr>\n    <tr>\n      <th>3008</th>\n      <td>6.151394</td>\n      <td>7.165580</td>\n      <td>10.535087</td>\n    </tr>\n  </tbody>\n</table>\n<p>3009 rows × 3 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}