{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Customers Clustering","metadata":{}},{"cell_type":"markdown","source":"**Description**\n\nThis dataset consists of 1 Million+ transaction by over 800K customers for a bank in India. The data contains information such as - customer age (DOB), location, gender, account balance at the time of the transaction, transaction details, transaction amount, etc.\n\n","metadata":{}},{"cell_type":"markdown","source":"**Feature**\n\n- TransactionID (884265): Unite Transaction ID\n- CustomerDOB (day/month/year): Date of Birth\n- CustGender: Gender\n- CustLocation: Location\n- CustAccountBalance\n- TransactionDate\n- TransactionTime: Transaction Time (unix timestamp_\n- TransactionAmount (INR): Amount in INR","metadata":{}},{"cell_type":"markdown","source":"**Target Problem**\n\n1. Perform Clustering / Segmentation on the dataset and identify popular customer groups along with their definitions/rules\n2. Perform Location-wise analysis to identify regional trends in India\n3. Perform transaction-related analysis to identify interesting trends that can be used by a bank to improve / optimi their user experiences\n4. Customer Recency, Frequency, Monetary analysis\n5. Network analysis or Graph analysis of customer data.","metadata":{}},{"cell_type":"markdown","source":"# Library","metadata":{}},{"cell_type":"code","source":"!pip install chardet\n!pip install plotly","metadata":{"execution":{"iopub.status.busy":"2024-07-16T11:36:24.560172Z","iopub.execute_input":"2024-07-16T11:36:24.560561Z","iopub.status.idle":"2024-07-16T11:36:51.137267Z","shell.execute_reply.started":"2024-07-16T11:36:24.560528Z","shell.execute_reply":"2024-07-16T11:36:51.135891Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting chardet\n  Downloading chardet-5.2.0-py3-none-any.whl.metadata (3.4 kB)\nDownloading chardet-5.2.0-py3-none-any.whl (199 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.4/199.4 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: chardet\nSuccessfully installed chardet-5.2.0\nRequirement already satisfied: plotly in /opt/conda/lib/python3.10/site-packages (5.18.0)\nRequirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from plotly) (8.2.3)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from plotly) (21.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->plotly) (3.1.1)\n","output_type":"stream"}]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom pathlib import Path\nimport os\nimport chardet\nimport requests\nimport itertools\nfrom itertools import cycle\nimport pickle\n\nimport time\n\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats","metadata":{"execution":{"iopub.status.busy":"2024-07-16T11:36:51.139819Z","iopub.execute_input":"2024-07-16T11:36:51.140212Z","iopub.status.idle":"2024-07-16T11:36:52.077587Z","shell.execute_reply.started":"2024-07-16T11:36:51.140176Z","shell.execute_reply":"2024-07-16T11:36:52.076506Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n%matplotlib inline\n\n\n# Seaborn\nimport seaborn as sns\nsns.set(style='whitegrid', font_scale=1.4)\n\n\n# Plotly\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\n#mlxtend\nfrom mlxtend.plotting import scatterplotmatrix\nfrom mlxtend.plotting import heatmap","metadata":{"execution":{"iopub.status.busy":"2024-07-16T12:49:24.010710Z","iopub.execute_input":"2024-07-16T12:49:24.011151Z","iopub.status.idle":"2024-07-16T12:49:24.020332Z","shell.execute_reply.started":"2024-07-16T12:49:24.011117Z","shell.execute_reply":"2024-07-16T12:49:24.018859Z"},"trusted":true},"execution_count":74,"outputs":[]},{"cell_type":"code","source":"import eli5\nfrom eli5.sklearn import PermutationImportance\nfrom sklearn.utils import resample\n\nfrom sklearn.base import BaseEstimator, TransformerMixin, ClassifierMixin, clone\n\n#Feature selection\nfrom sklearn.feature_selection import mutual_info_classif, SelectFromModel, RFE, RFECV, SelectKBest, chi2\n\n#Model selection\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, RandomizedSearchCV, cross_val_score, cross_validate\n\n#Model pipe\nfrom sklearn.pipeline import Pipeline, _name_estimators\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\n\n#Preprocessing\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder, LabelEncoder, label_binarize\nimport category_encoders as ce\nfrom category_encoders import MEstimateEncoder\nfrom imblearn.over_sampling import SMOTE\n\n#Model\nimport xgboost as xgb\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n#Evalution\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, roc_curve, auc, precision_recall_curve, average_precision_score\nfrom sklearn.tree import plot_tree \n","metadata":{"execution":{"iopub.status.busy":"2024-07-16T11:36:54.311325Z","iopub.execute_input":"2024-07-16T11:36:54.311941Z","iopub.status.idle":"2024-07-16T11:37:11.365385Z","shell.execute_reply.started":"2024-07-16T11:36:54.311905Z","shell.execute_reply":"2024-07-16T11:37:11.364224Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"2024-07-16 11:36:58.784180: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-16 11:36:58.784328: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-16 11:36:58.955114: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load Data","metadata":{}},{"cell_type":"code","source":"class LoadingFile():\n    def __init__(self, path, name, url=None):\n        self.path = path\n        self.name = name\n        self.url = url\n\n    def size(self):\n        kib = 1024\n        size = os.path.getsize(Path(self.path))\n        print(f\"{self.name} size: {np.round(size / kib)} Kib\")\n\n    def Encoding_predict(self):\n        file_path = Path(self.path)\n        with open(file_path, 'rb') as f:\n            contents = f.read()\n\n        encoding_info = chardet.detect(contents)\n\n        detected_encoding = encoding_info['encoding']\n        confidence = encoding_info['confidence']\n\n        print(f\"File name: {self.name:<25}\\nEncoding: {detected_encoding:<10}Confidence: {confidence}\")\n\n\n    def download_data(self):\n        data_path = Path(self.path)\n        if data_path.is_dir():\n            print(f\"{data_path} directory exist.\")\n        else:\n            print(f\"Creating {data_path}\")\n            data_path.mkdir(parents=True, exist_ok=True)\n\n        if (data_path / Path(self.name)).exists():\n            print(f\"{self.name} already exist\")\n            pass\n        else:\n            with open(data_path / self.name, \"wb\") as f:\n                req = requests.get(self.url)\n                print(\"Downloading data...\")\n                f.write(req.content)\n                print(\"Done!\")\nname=[]\npath = []\nfor dirname, _, filenames in os.walk('/kaggle/input/bank-customer-segmentation'):\n    for filename in filenames:\n        name.append(filename)\n        path.append(os.path.join(dirname, filename))\n\n        print(f\"Path: {dirname} | Data_Name: {filename}\")\n        size = LoadingFile(os.path.join(dirname, filename), filename).size()\n        print()","metadata":{"execution":{"iopub.status.busy":"2024-07-16T11:37:11.368165Z","iopub.execute_input":"2024-07-16T11:37:11.369485Z","iopub.status.idle":"2024-07-16T11:37:11.393902Z","shell.execute_reply.started":"2024-07-16T11:37:11.369435Z","shell.execute_reply":"2024-07-16T11:37:11.392298Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Path: /kaggle/input/bank-customer-segmentation | Data_Name: bank_transactions.csv\nbank_transactions.csv size: 65981.0 Kib\n\n","output_type":"stream"}]},{"cell_type":"code","source":"# load data one for analysis another for analysis\ndf = pd.read_csv(path[0]) #chunksize=1000\nprint(f\"Data Shape : {df.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-16T11:38:43.930938Z","iopub.execute_input":"2024-07-16T11:38:43.931371Z","iopub.status.idle":"2024-07-16T11:38:47.686749Z","shell.execute_reply.started":"2024-07-16T11:38:43.931338Z","shell.execute_reply":"2024-07-16T11:38:47.685479Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Data Shape : (1048567, 9)\n","output_type":"stream"}]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-16T12:32:54.979776Z","iopub.execute_input":"2024-07-16T12:32:54.980174Z","iopub.status.idle":"2024-07-16T12:32:54.997333Z","shell.execute_reply.started":"2024-07-16T12:32:54.980147Z","shell.execute_reply":"2024-07-16T12:32:54.996258Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"  TransactionID CustomerID CustomerDOB CustGender CustLocation  \\\n0            T1   C5841053     10/1/94          F   JAMSHEDPUR   \n1            T2   C2142763      4/4/57          M      JHAJJAR   \n2            T3   C4417068    26/11/96          F       MUMBAI   \n3            T4   C5342380     14/9/73          F       MUMBAI   \n4            T5   C9031234     24/3/88          F  NAVI MUMBAI   \n\n   CustAccountBalance TransactionDate  TransactionTime  \\\n0            17819.05          2/8/16           143207   \n1             2270.69          2/8/16           141858   \n2            17874.44          2/8/16           142712   \n3           866503.21          2/8/16           142714   \n4             6714.43          2/8/16           181156   \n\n   TransactionAmount (INR)  \n0                     25.0  \n1                  27999.0  \n2                    459.0  \n3                   2060.0  \n4                   1762.5  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>TransactionID</th>\n      <th>CustomerID</th>\n      <th>CustomerDOB</th>\n      <th>CustGender</th>\n      <th>CustLocation</th>\n      <th>CustAccountBalance</th>\n      <th>TransactionDate</th>\n      <th>TransactionTime</th>\n      <th>TransactionAmount (INR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>T1</td>\n      <td>C5841053</td>\n      <td>10/1/94</td>\n      <td>F</td>\n      <td>JAMSHEDPUR</td>\n      <td>17819.05</td>\n      <td>2/8/16</td>\n      <td>143207</td>\n      <td>25.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>T2</td>\n      <td>C2142763</td>\n      <td>4/4/57</td>\n      <td>M</td>\n      <td>JHAJJAR</td>\n      <td>2270.69</td>\n      <td>2/8/16</td>\n      <td>141858</td>\n      <td>27999.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>T3</td>\n      <td>C4417068</td>\n      <td>26/11/96</td>\n      <td>F</td>\n      <td>MUMBAI</td>\n      <td>17874.44</td>\n      <td>2/8/16</td>\n      <td>142712</td>\n      <td>459.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>T4</td>\n      <td>C5342380</td>\n      <td>14/9/73</td>\n      <td>F</td>\n      <td>MUMBAI</td>\n      <td>866503.21</td>\n      <td>2/8/16</td>\n      <td>142714</td>\n      <td>2060.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>T5</td>\n      <td>C9031234</td>\n      <td>24/3/88</td>\n      <td>F</td>\n      <td>NAVI MUMBAI</td>\n      <td>6714.43</td>\n      <td>2/8/16</td>\n      <td>181156</td>\n      <td>1762.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"**Check dtypes and memory**","metadata":{}},{"cell_type":"code","source":"df.info(memory_usage=\"deep\")","metadata":{"execution":{"iopub.status.busy":"2024-07-16T11:38:54.135226Z","iopub.execute_input":"2024-07-16T11:38:54.135608Z","iopub.status.idle":"2024-07-16T11:38:55.719141Z","shell.execute_reply.started":"2024-07-16T11:38:54.135579Z","shell.execute_reply":"2024-07-16T11:38:55.717910Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1048567 entries, 0 to 1048566\nData columns (total 9 columns):\n #   Column                   Non-Null Count    Dtype  \n---  ------                   --------------    -----  \n 0   TransactionID            1048567 non-null  object \n 1   CustomerID               1048567 non-null  object \n 2   CustomerDOB              1045170 non-null  object \n 3   CustGender               1047467 non-null  object \n 4   CustLocation             1048416 non-null  object \n 5   CustAccountBalance       1046198 non-null  float64\n 6   TransactionDate          1048567 non-null  object \n 7   TransactionTime          1048567 non-null  int64  \n 8   TransactionAmount (INR)  1048567 non-null  float64\ndtypes: float64(2), int64(1), object(6)\nmemory usage: 403.5 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df.memory_usage()","metadata":{"execution":{"iopub.status.busy":"2024-07-16T12:28:46.985336Z","iopub.execute_input":"2024-07-16T12:28:46.985842Z","iopub.status.idle":"2024-07-16T12:28:46.996516Z","shell.execute_reply.started":"2024-07-16T12:28:46.985784Z","shell.execute_reply":"2024-07-16T12:28:46.995315Z"},"trusted":true},"execution_count":58,"outputs":[{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"Index                          128\nTransactionID              8388536\nCustomerID                 8388536\nCustomerDOB                8388536\nCustGender                 8388536\nCustLocation               8388536\nCustAccountBalance         8388536\nTransactionDate            8388536\nTransactionTime            8388536\nTransactionAmount (INR)    8388536\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"*Notes*\n\n- We will need to transform the data to be numeric (int64 or float64) so that we can train machine learning models.\n- If memory not enough, we can do some optimize:\n    - Changing numeric columns to smaller dtype (float16 and int16)\n    - Changing categorical columns to label\n    - Importing data in chunks","metadata":{}},{"cell_type":"markdown","source":"**Missing Data**","metadata":{}},{"cell_type":"code","source":"print('Data MISSING VALUES:')\nprint(df.isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-07-16T12:17:12.384021Z","iopub.execute_input":"2024-07-16T12:17:12.385078Z","iopub.status.idle":"2024-07-16T12:17:12.703823Z","shell.execute_reply.started":"2024-07-16T12:17:12.385040Z","shell.execute_reply":"2024-07-16T12:17:12.702335Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"Data MISSING VALUES:\nTransactionID                 0\nCustomerID                    0\nCustomerDOB                3397\nCustGender                 1100\nCustLocation                151\nCustAccountBalance         2369\nTransactionDate               0\nTransactionTime               0\nTransactionAmount (INR)       0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"*Notes*\n\n- There are 4 features have missing value","metadata":{}},{"cell_type":"markdown","source":"**Duplcate Data**","metadata":{}},{"cell_type":"code","source":"print(f'Duplicates in Data: {df.duplicated().sum()}, ({np.round(100*df.duplicated().sum()/len(df),1)}%)')","metadata":{"execution":{"iopub.status.busy":"2024-07-16T12:18:07.560900Z","iopub.execute_input":"2024-07-16T12:18:07.561436Z","iopub.status.idle":"2024-07-16T12:18:09.826350Z","shell.execute_reply.started":"2024-07-16T12:18:07.561393Z","shell.execute_reply":"2024-07-16T12:18:09.824905Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"Duplicates in Data: 0, (0.0%)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"*Notes*\n\n- No Duplcate data !!","metadata":{}},{"cell_type":"markdown","source":"**Cardinality of features**","metadata":{}},{"cell_type":"code","source":"df.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-07-16T12:20:22.335333Z","iopub.execute_input":"2024-07-16T12:20:22.335907Z","iopub.status.idle":"2024-07-16T12:20:23.189834Z","shell.execute_reply.started":"2024-07-16T12:20:22.335864Z","shell.execute_reply":"2024-07-16T12:20:23.188700Z"},"trusted":true},"execution_count":57,"outputs":[{"execution_count":57,"output_type":"execute_result","data":{"text/plain":"TransactionID              1048567\nCustomerID                  884265\nCustomerDOB                  17254\nCustGender                       3\nCustLocation                  9355\nCustAccountBalance          161328\nTransactionDate                 55\nTransactionTime              81918\nTransactionAmount (INR)      93024\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"*Notes*\n\n- The data may only record 55 TransactionDate","metadata":{}},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"markdown","source":"## Categoric Data","metadata":{}},{"cell_type":"markdown","source":"**TransactionID**","metadata":{}},{"cell_type":"code","source":"df[\"TransactionID\"].shape[0] == df.shape[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-16T12:37:04.091749Z","iopub.execute_input":"2024-07-16T12:37:04.092206Z","iopub.status.idle":"2024-07-16T12:37:04.099559Z","shell.execute_reply.started":"2024-07-16T12:37:04.092173Z","shell.execute_reply":"2024-07-16T12:37:04.098308Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"markdown","source":"*Notes*\n\n- One TransactionID one data","metadata":{}},{"cell_type":"markdown","source":"**CustomerID**","metadata":{}},{"cell_type":"code","source":"ax = sns.countplot(x=df.groupby([\"CustomerID\"]).size().sort_values(ascending=False))\n\nplt.title(\"Number of Customers with Different Transactions Counts\")\nplt.xlabel(\"The number of Transactions\")\nplt.ylabel(\"The number of Customers\")\n# annotate the bars with fmt from matplotlib\nax.bar_label(ax.containers[0], fmt=lambda x: f\"{int(x)}\", size=12)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-16T12:51:11.687826Z","iopub.execute_input":"2024-07-16T12:51:11.688235Z","iopub.status.idle":"2024-07-16T12:51:14.605164Z","shell.execute_reply.started":"2024-07-16T12:51:11.688202Z","shell.execute_reply":"2024-07-16T12:51:14.603871Z"},"trusted":true},"execution_count":76,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"*Notes*\n\n- There are some people transactions multiple times in this data record.\n\n*Insights*\n\n- Let's check if anyone has missing values and transaction multiple times.","metadata":{}},{"cell_type":"code","source":"mv_customerid = df[df.isna().any(axis=1)][\"CustomerID\"]\n\n# Find transaction more than one time\nmulti_trans_customers = df.groupby(\"CustomerID\").filter(lambda x: len(x) > 1)\n\n# Filter CustomerID, which also has missing value\nmulti_trans_and_mv_cusid = multi_trans_customers[multi_trans_customers[\"CustomerID\"].isin(mv_customerid)]","metadata":{"execution":{"iopub.status.busy":"2024-07-16T13:17:25.750305Z","iopub.execute_input":"2024-07-16T13:17:25.750688Z","iopub.status.idle":"2024-07-16T13:17:52.441753Z","shell.execute_reply.started":"2024-07-16T13:17:25.750658Z","shell.execute_reply":"2024-07-16T13:17:52.440526Z"},"trusted":true},"execution_count":96,"outputs":[]},{"cell_type":"code","source":"multi_trans_and_mv_cusid.sort_values([\"CustomerID\"]).shape","metadata":{"execution":{"iopub.status.busy":"2024-07-16T13:20:32.081426Z","iopub.execute_input":"2024-07-16T13:20:32.082336Z","iopub.status.idle":"2024-07-16T13:20:32.097574Z","shell.execute_reply.started":"2024-07-16T13:20:32.082298Z","shell.execute_reply":"2024-07-16T13:20:32.096403Z"},"trusted":true},"execution_count":101,"outputs":[{"execution_count":101,"output_type":"execute_result","data":{"text/plain":"(4517, 9)"},"metadata":{}}]},{"cell_type":"code","source":"multi_trans_and_mv_cusid.sort_values([\"CustomerID\"]).isna().any()","metadata":{"execution":{"iopub.status.busy":"2024-07-16T13:20:39.445862Z","iopub.execute_input":"2024-07-16T13:20:39.446557Z","iopub.status.idle":"2024-07-16T13:20:39.467587Z","shell.execute_reply.started":"2024-07-16T13:20:39.446519Z","shell.execute_reply":"2024-07-16T13:20:39.466274Z"},"trusted":true},"execution_count":102,"outputs":[{"execution_count":102,"output_type":"execute_result","data":{"text/plain":"TransactionID              False\nCustomerID                 False\nCustomerDOB                 True\nCustGender                  True\nCustLocation                True\nCustAccountBalance          True\nTransactionDate            False\nTransactionTime            False\nTransactionAmount (INR)    False\ndtype: bool"},"metadata":{}}]},{"cell_type":"markdown","source":"*Notes*\n\n- Great! We have identified customers with multiple transactions who have missing values. We can fill in the missing values for CustomerDOB, CustGender, and CustLocation (assuming the customer has not changed location) during the missing value filling.\n- For CustAccountBalance, we can update it by subtracting TransactionAmount (INR) from the previous CustAccountBalance.","metadata":{}},{"cell_type":"markdown","source":"## Numeric Data","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}