{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2743905,"sourceType":"datasetVersion","datasetId":1672910}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Customers Clustering","metadata":{}},{"cell_type":"markdown","source":"**Description**\n\nThis dataset consists of 1 Million+ transaction by over 800K customers for a bank in India. The data contains information such as - customer age (DOB), location, gender, account balance at the time of the transaction, transaction details, transaction amount, etc.\n\n","metadata":{}},{"cell_type":"markdown","source":"**Feature**\n\n- TransactionID (884265): Unite Transaction ID\n- CustomerDOB (day/month/year): Date of Birth\n- CustGender: Gender\n- CustLocation: Location\n- CustAccountBalance\n- TransactionDate\n- TransactionTime: Transaction Time (unix timestamp_\n- TransactionAmount (INR): Amount in INR","metadata":{}},{"cell_type":"markdown","source":"**Target Problem**\n\n1. Perform Clustering / Segmentation on the dataset and identify popular customer groups along with their definitions/rules\n2. Perform Location-wise analysis to identify regional trends in India\n3. Perform transaction-related analysis to identify interesting trends that can be used by a bank to improve / optimi their user experiences\n4. Customer Recency, Frequency, Monetary analysis\n5. Network analysis or Graph analysis of customer data.","metadata":{}},{"cell_type":"markdown","source":"# Library","metadata":{}},{"cell_type":"code","source":"!pip install chardet\n!pip install plotly\n!pip install geocoder","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:10:47.728514Z","iopub.execute_input":"2024-07-21T04:10:47.728950Z","iopub.status.idle":"2024-07-21T04:11:35.495596Z","shell.execute_reply.started":"2024-07-21T04:10:47.728918Z","shell.execute_reply":"2024-07-21T04:11:35.493644Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Collecting chardet\n  Downloading chardet-5.2.0-py3-none-any.whl.metadata (3.4 kB)\nDownloading chardet-5.2.0-py3-none-any.whl (199 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.4/199.4 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: chardet\nSuccessfully installed chardet-5.2.0\nRequirement already satisfied: plotly in /opt/conda/lib/python3.10/site-packages (5.18.0)\nRequirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from plotly) (8.2.3)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from plotly) (21.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->plotly) (3.1.1)\nCollecting geocoder\n  Downloading geocoder-1.38.1-py2.py3-none-any.whl.metadata (14 kB)\nRequirement already satisfied: click in /opt/conda/lib/python3.10/site-packages (from geocoder) (8.1.7)\nRequirement already satisfied: future in /opt/conda/lib/python3.10/site-packages (from geocoder) (1.0.0)\nCollecting ratelim (from geocoder)\n  Downloading ratelim-0.1.6-py2.py3-none-any.whl.metadata (1.4 kB)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from geocoder) (2.32.3)\nRequirement already satisfied: six in /opt/conda/lib/python3.10/site-packages (from geocoder) (1.16.0)\nRequirement already satisfied: decorator in /opt/conda/lib/python3.10/site-packages (from ratelim->geocoder) (5.1.1)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->geocoder) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->geocoder) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->geocoder) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->geocoder) (2024.7.4)\nDownloading geocoder-1.38.1-py2.py3-none-any.whl (98 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.6/98.6 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hDownloading ratelim-0.1.6-py2.py3-none-any.whl (4.0 kB)\nInstalling collected packages: ratelim, geocoder\nSuccessfully installed geocoder-1.38.1 ratelim-0.1.6\n","output_type":"stream"}]},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings('ignore')\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom pathlib import Path\nimport os\nimport chardet\nimport requests\nimport itertools\nfrom itertools import cycle\nimport pickle\nimport re\n\nimport geocoder\n\nimport time\n\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:11:35.498400Z","iopub.execute_input":"2024-07-21T04:11:35.498894Z","iopub.status.idle":"2024-07-21T04:11:36.216179Z","shell.execute_reply.started":"2024-07-21T04:11:35.498852Z","shell.execute_reply":"2024-07-21T04:11:36.214824Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n%matplotlib inline\n\n\n# Seaborn\nimport seaborn as sns\nsns.set(style='whitegrid', font_scale=1.4)\n\n\n# Plotly\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\n#mlxtend\nfrom mlxtend.plotting import scatterplotmatrix\nfrom mlxtend.plotting import heatmap","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:11:36.217886Z","iopub.execute_input":"2024-07-21T04:11:36.218681Z","iopub.status.idle":"2024-07-21T04:11:38.297766Z","shell.execute_reply.started":"2024-07-21T04:11:36.218634Z","shell.execute_reply":"2024-07-21T04:11:38.296526Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"import eli5\nfrom eli5.sklearn import PermutationImportance\nfrom sklearn.utils import resample\n\nfrom sklearn.base import BaseEstimator, TransformerMixin, ClassifierMixin, clone\n\n#Feature selection\nfrom sklearn.feature_selection import mutual_info_classif, SelectFromModel, RFE, RFECV, SelectKBest, chi2\n\n#Model selection\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, RandomizedSearchCV, cross_val_score, cross_validate\n\n#Model pipe\nfrom sklearn.pipeline import Pipeline, _name_estimators\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\n\n#Preprocessing\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder, LabelEncoder, label_binarize\nimport category_encoders as ce\nfrom category_encoders import MEstimateEncoder\nfrom imblearn.over_sampling import SMOTE\n\n#Model\nimport xgboost as xgb\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\n#Evalution\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, confusion_matrix, roc_curve, auc, precision_recall_curve, average_precision_score\nfrom sklearn.tree import plot_tree \n","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:11:38.301160Z","iopub.execute_input":"2024-07-21T04:11:38.301848Z","iopub.status.idle":"2024-07-21T04:11:55.411336Z","shell.execute_reply.started":"2024-07-21T04:11:38.301811Z","shell.execute_reply":"2024-07-21T04:11:55.410109Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"2024-07-21 04:11:42.655677: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-21 04:11:42.655818: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-21 04:11:42.808534: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load Data","metadata":{}},{"cell_type":"code","source":"class LoadingFile():\n    def __init__(self, path, name, url=None):\n        self.path = path\n        self.name = name\n        self.url = url\n\n    def size(self):\n        kib = 1024\n        size = os.path.getsize(Path(self.path))\n        print(f\"{self.name} size: {np.round(size / kib)} Kib\")\n\n    def Encoding_predict(self):\n        file_path = Path(self.path)\n        with open(file_path, 'rb') as f:\n            contents = f.read()\n\n        encoding_info = chardet.detect(contents)\n\n        detected_encoding = encoding_info['encoding']\n        confidence = encoding_info['confidence']\n\n        print(f\"File name: {self.name:<25}\\nEncoding: {detected_encoding:<10}Confidence: {confidence}\")\n\n\n    def download_data(self):\n        data_path = Path(self.path)\n        if data_path.is_dir():\n            print(f\"{data_path} directory exist.\")\n        else:\n            print(f\"Creating {data_path}\")\n            data_path.mkdir(parents=True, exist_ok=True)\n\n        if (data_path / Path(self.name)).exists():\n            print(f\"{self.name} already exist\")\n            pass\n        else:\n            with open(data_path / self.name, \"wb\") as f:\n                req = requests.get(self.url)\n                print(\"Downloading data...\")\n                f.write(req.content)\n                print(\"Done!\")\nname=[]\npath = []\nfor dirname, _, filenames in os.walk('/kaggle/input/bank-customer-segmentation'):\n    for filename in filenames:\n        name.append(filename)\n        path.append(os.path.join(dirname, filename))\n\n        print(f\"Path: {dirname} | Data_Name: {filename}\")\n        size = LoadingFile(os.path.join(dirname, filename), filename).size()\n        print()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:40.143321Z","iopub.execute_input":"2024-07-20T12:30:40.143715Z","iopub.status.idle":"2024-07-20T12:30:40.167867Z","shell.execute_reply.started":"2024-07-20T12:30:40.143685Z","shell.execute_reply":"2024-07-20T12:30:40.166746Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# load data one for analysis another for analysis\ndf = pd.read_csv(path[0]) #chunksize=1000\nprint(f\"Data Shape : {df.shape}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:40.169446Z","iopub.execute_input":"2024-07-20T12:30:40.169810Z","iopub.status.idle":"2024-07-20T12:30:42.776417Z","shell.execute_reply.started":"2024-07-20T12:30:40.169774Z","shell.execute_reply":"2024-07-20T12:30:42.775322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:42.778088Z","iopub.execute_input":"2024-07-20T12:30:42.778426Z","iopub.status.idle":"2024-07-20T12:30:42.794250Z","shell.execute_reply.started":"2024-07-20T12:30:42.778397Z","shell.execute_reply":"2024-07-20T12:30:42.793060Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Check dtypes and memory**","metadata":{}},{"cell_type":"code","source":"df.info(memory_usage=\"deep\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:42.796100Z","iopub.execute_input":"2024-07-20T12:30:42.796497Z","iopub.status.idle":"2024-07-20T12:30:44.486011Z","shell.execute_reply.started":"2024-07-20T12:30:42.796465Z","shell.execute_reply":"2024-07-20T12:30:44.484857Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.memory_usage()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:44.487244Z","iopub.execute_input":"2024-07-20T12:30:44.487594Z","iopub.status.idle":"2024-07-20T12:30:44.496605Z","shell.execute_reply.started":"2024-07-20T12:30:44.487559Z","shell.execute_reply":"2024-07-20T12:30:44.495505Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- We will need to transform the data to be numeric (int64 or float64) so that we can train machine learning models.\n- If memory not enough, we can do some optimize:\n    - Changing numeric columns to smaller dtype (float16 and int16)\n    - Changing categorical columns to label\n    - Importing data in chunks","metadata":{}},{"cell_type":"markdown","source":"**Missing Data**","metadata":{}},{"cell_type":"code","source":"print('Data MISSING VALUES:')\nprint(df.isna().sum())","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:44.497892Z","iopub.execute_input":"2024-07-20T12:30:44.498196Z","iopub.status.idle":"2024-07-20T12:30:44.859091Z","shell.execute_reply.started":"2024-07-20T12:30:44.498171Z","shell.execute_reply":"2024-07-20T12:30:44.857942Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- There are 4 features have missing value","metadata":{}},{"cell_type":"markdown","source":"**Duplcate Data**","metadata":{}},{"cell_type":"code","source":"print(f'Duplicates in Data: {df.duplicated().sum()}, ({np.round(100*df.duplicated().sum()/len(df),1)}%)')","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:44.860396Z","iopub.execute_input":"2024-07-20T12:30:44.860737Z","iopub.status.idle":"2024-07-20T12:30:47.183629Z","shell.execute_reply.started":"2024-07-20T12:30:44.860709Z","shell.execute_reply":"2024-07-20T12:30:47.182450Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- No Duplcate data !!","metadata":{}},{"cell_type":"markdown","source":"**Cardinality of features**","metadata":{}},{"cell_type":"code","source":"df.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:47.184907Z","iopub.execute_input":"2024-07-20T12:30:47.185283Z","iopub.status.idle":"2024-07-20T12:30:48.204160Z","shell.execute_reply.started":"2024-07-20T12:30:47.185248Z","shell.execute_reply":"2024-07-20T12:30:48.202933Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- The data may only record 55 TransactionDate","metadata":{}},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"markdown","source":"## Categoric Data","metadata":{}},{"cell_type":"markdown","source":"**TransactionID**","metadata":{}},{"cell_type":"code","source":"df[\"TransactionID\"].shape[0] == df.shape[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:48.205435Z","iopub.execute_input":"2024-07-20T12:30:48.205773Z","iopub.status.idle":"2024-07-20T12:30:48.213040Z","shell.execute_reply.started":"2024-07-20T12:30:48.205747Z","shell.execute_reply":"2024-07-20T12:30:48.211873Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- One TransactionID one data","metadata":{}},{"cell_type":"markdown","source":"**CustomerID**","metadata":{}},{"cell_type":"code","source":"ax = sns.countplot(x=df.groupby([\"CustomerID\"]).size().sort_values(ascending=False))\n\nplt.title(\"Number of Customers with Different Transactions Counts\")\nplt.xlabel(\"The number of Transactions\")\nplt.ylabel(\"The number of Customers\")\n# annotate the bars with fmt from matplotlib\nax.bar_label(ax.containers[0], fmt=lambda x: f\"{int(x)}\", size=12)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:48.217088Z","iopub.execute_input":"2024-07-20T12:30:48.217446Z","iopub.status.idle":"2024-07-20T12:30:51.359363Z","shell.execute_reply.started":"2024-07-20T12:30:48.217417Z","shell.execute_reply":"2024-07-20T12:30:51.358188Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- There are some people transactions multiple times in this data record.\n\n*Insights*\n\n- Let's check if anyone has missing values and transaction multiple times.","metadata":{}},{"cell_type":"code","source":"mv_customerid = df[df.isna().any(axis=1)][\"CustomerID\"]\n\n# Find transaction more than one time\nmulti_trans_customers = df.groupby(\"CustomerID\").filter(lambda x: len(x) > 1)\n\n# Filter CustomerID, which also has missing value\nmulti_trans_and_mv_cus = multi_trans_customers[multi_trans_customers[\"CustomerID\"].isin(mv_customerid)]","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:30:51.360933Z","iopub.execute_input":"2024-07-20T12:30:51.361291Z","iopub.status.idle":"2024-07-20T12:31:15.492058Z","shell.execute_reply.started":"2024-07-20T12:30:51.361263Z","shell.execute_reply":"2024-07-20T12:31:15.490946Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"multi_trans_and_mv_cus.sort_values([\"CustomerID\"]).shape","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:15.493549Z","iopub.execute_input":"2024-07-20T12:31:15.493892Z","iopub.status.idle":"2024-07-20T12:31:15.508203Z","shell.execute_reply.started":"2024-07-20T12:31:15.493862Z","shell.execute_reply":"2024-07-20T12:31:15.507031Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"multi_trans_and_mv_cus.sort_values([\"CustomerID\"]).isna().any()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:15.509880Z","iopub.execute_input":"2024-07-20T12:31:15.511060Z","iopub.status.idle":"2024-07-20T12:31:15.533886Z","shell.execute_reply.started":"2024-07-20T12:31:15.511028Z","shell.execute_reply":"2024-07-20T12:31:15.532554Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Great! We have identified customers with multiple transactions who have missing values. We can fill in the missing values for CustomerDOB, CustGender, and CustLocation (assuming the customer has not changed location) during the missing value filling.\n- For CustAccountBalance, we can update it by subtracting TransactionAmount (INR) from the previous CustAccountBalance.","metadata":{}},{"cell_type":"markdown","source":"**CustomerDOB**","metadata":{}},{"cell_type":"code","source":"# Split DOB to three feature\ndf[\"CustomerYOB\"] = df[\"CustomerDOB\"].str.split(\"/\").map(lambda x: x[2] if type(x) == list else x)\ndf[\"CustomerMOB\"] = df[\"CustomerDOB\"].str.split(\"/\").map(lambda x: x[1] if type(x) == list else x)\ndf[\"CustomerDaOB\"] = df[\"CustomerDOB\"].str.split(\"/\").map(lambda x: x[0] if type(x) == list else x)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:15.535334Z","iopub.execute_input":"2024-07-20T12:31:15.535769Z","iopub.status.idle":"2024-07-20T12:31:24.357072Z","shell.execute_reply.started":"2024-07-20T12:31:15.535731Z","shell.execute_reply":"2024-07-20T12:31:24.355993Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Adding new features, CustomerYOB(Year of Birth), CustomerMOB(Month of Birth) and CustomerDOB(Day of Birth)","metadata":{}},{"cell_type":"markdown","source":"Year","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10,6))\nsns.countplot(x = df[\"CustomerYOB\"].dropna().astype(int).sort_values())\nplt.xlabel(\"Year (19XX)\")\nplt.xticks(ticks=range(0, 100, 3), size=8)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:24.358642Z","iopub.execute_input":"2024-07-20T12:31:24.359499Z","iopub.status.idle":"2024-07-20T12:31:25.548025Z","shell.execute_reply.started":"2024-07-20T12:31:24.359460Z","shell.execute_reply":"2024-07-20T12:31:25.546864Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Year has left skew and most of people between 70-97\n- We need find the meaning of 1800","metadata":{}},{"cell_type":"code","source":"sns.countplot(x=df[\"CustomerMOB\"].dropna().astype(int).sort_values())\nplt.xlabel(\"Month\")\nplt.xticks(size=8)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:25.549612Z","iopub.execute_input":"2024-07-20T12:31:25.550050Z","iopub.status.idle":"2024-07-20T12:31:26.175834Z","shell.execute_reply.started":"2024-07-20T12:31:25.550011Z","shell.execute_reply":"2024-07-20T12:31:26.174621Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Lots of people's birthdat are in January ","metadata":{}},{"cell_type":"code","source":"sns.histplot(df[\"CustomerDaOB\"].dropna().astype(int).sort_values())\n\nplt.xticks(ticks=range(1, 32, 2), size=8)\nplt.xlabel(\"Days\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:26.177228Z","iopub.execute_input":"2024-07-20T12:31:26.177598Z","iopub.status.idle":"2024-07-20T12:31:27.711183Z","shell.execute_reply.started":"2024-07-20T12:31:26.177560Z","shell.execute_reply":"2024-07-20T12:31:27.709999Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Because CustomerDOB has lots of 1800/1/1, the month=1 and day=1 has lots of people.\n- Let's see people have this weird date.","metadata":{}},{"cell_type":"code","source":"special_date_customerid = df[df[\"CustomerYOB\"] == \"1800\"][\"CustomerID\"]\n\n# Filter CustomerID, which also has missing value\nmulti_trans_and_special_date_cus = multi_trans_customers[multi_trans_customers[\"CustomerID\"].isin(special_date_customerid)]\nmulti_trans_and_special_date_cus.sort_values(\"CustomerID\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:27.712658Z","iopub.execute_input":"2024-07-20T12:31:27.713078Z","iopub.status.idle":"2024-07-20T12:31:28.081127Z","shell.execute_reply.started":"2024-07-20T12:31:27.713045Z","shell.execute_reply":"2024-07-20T12:31:28.079809Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- It seems like the 1/1/1800 is a default for who isn't fill the information. We can replace all 1/1/1800 to the correct birth date.\n- Although same person in the data, but have different CustGender and CustLocation","metadata":{}},{"cell_type":"markdown","source":"**CustGender**","metadata":{}},{"cell_type":"code","source":"ax = sns.countplot(x=df[\"CustGender\"])\nax.bar_label(ax.containers[0], fmt=lambda x: f\"{int(x)}\", size=12)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:28.082824Z","iopub.execute_input":"2024-07-20T12:31:28.083247Z","iopub.status.idle":"2024-07-20T12:31:28.851995Z","shell.execute_reply.started":"2024-07-20T12:31:28.083211Z","shell.execute_reply":"2024-07-20T12:31:28.850800Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Let's see what is T means.\n\n*Insight*\n\n- The reason why M has lot of people is that many people has 1/1/1800 also is gender M","metadata":{}},{"cell_type":"code","source":"t_cusid = df[df[\"CustGender\"] == \"T\"][\"CustomerID\"].values\ndf[df[\"CustomerID\"].isin(t_cusid)]","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:28.853612Z","iopub.execute_input":"2024-07-20T12:31:28.854055Z","iopub.status.idle":"2024-07-20T12:31:29.004545Z","shell.execute_reply.started":"2024-07-20T12:31:28.854014Z","shell.execute_reply":"2024-07-20T12:31:29.003173Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- The customer who Gender=T only have one trasaction data.","metadata":{}},{"cell_type":"code","source":"df[df[\"CustomerYOB\"] == \"1800\"][\"CustGender\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:29.005909Z","iopub.execute_input":"2024-07-20T12:31:29.006277Z","iopub.status.idle":"2024-07-20T12:31:29.186365Z","shell.execute_reply.started":"2024-07-20T12:31:29.006247Z","shell.execute_reply":"2024-07-20T12:31:29.185274Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- It seems like Gender=M is the default value of CustGender. We will try our best fill gender to correct.","metadata":{}},{"cell_type":"markdown","source":"**CustLocation**","metadata":{}},{"cell_type":"code","source":"df[\"CustLocation\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:29.187785Z","iopub.execute_input":"2024-07-20T12:31:29.188221Z","iopub.status.idle":"2024-07-20T12:31:29.293441Z","shell.execute_reply.started":"2024-07-20T12:31:29.188184Z","shell.execute_reply":"2024-07-20T12:31:29.292127Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- It seems location has different granuity.\n- We can create new feature log and alt.","metadata":{}},{"cell_type":"code","source":"df[df[\"CustLocation\"] == \".\"].shape[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:29.295078Z","iopub.execute_input":"2024-07-20T12:31:29.295504Z","iopub.status.idle":"2024-07-20T12:31:29.381376Z","shell.execute_reply.started":"2024-07-20T12:31:29.295466Z","shell.execute_reply":"2024-07-20T12:31:29.380254Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- There are 86 location name ., so we will treat it as missing value.","metadata":{}},{"cell_type":"code","source":"df[\"CustLocation\"] = df[\"CustLocation\"].replace(\".\", np.nan)\ndf[df[\"CustLocation\"] == \".\"].shape[0]","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:31:29.382613Z","iopub.execute_input":"2024-07-20T12:31:29.382930Z","iopub.status.idle":"2024-07-20T12:31:29.566180Z","shell.execute_reply.started":"2024-07-20T12:31:29.382904Z","shell.execute_reply":"2024-07-20T12:31:29.564987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Search longitude latitude and add to data frame","metadata":{}},{"cell_type":"code","source":"def change_to_lat_lng(val):\n    g = geocoder.arcgis(val)\n    return g.latlng\n\nlat_lon = df[\"CustLocation\"].map(lambda x : change_to_lat_lng(x) if type(x) == str else np.nan)\n\nlats = []\nlons = []\n\nfor lat, lon in lat_lon.values:\n    lats.append(lat)\n    lons.append(lon)\ndf[\"Lon\"] = lons","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:00.277233Z","iopub.execute_input":"2024-07-20T12:38:00.278253Z","iopub.status.idle":"2024-07-20T12:38:03.924774Z","shell.execute_reply.started":"2024-07-20T12:38:00.278157Z","shell.execute_reply":"2024-07-20T12:38:03.922311Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Saving dataframe because it take too much time for transforming location to lon and lat\ndf.to_csv(\"df.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:10.812861Z","iopub.execute_input":"2024-07-20T12:38:10.813265Z","iopub.status.idle":"2024-07-20T12:38:17.417598Z","shell.execute_reply.started":"2024-07-20T12:38:10.813234Z","shell.execute_reply":"2024-07-20T12:38:17.416391Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**TransactionDate**","metadata":{}},{"cell_type":"code","source":"df[\"TransactionDate\"] = df[\"TransactionDate\"].map(lambda x : f'20{x.split(\"/\")[2]}/{x.split(\"/\")[1]}/{x.split(\"/\")[0]}')","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:17.419557Z","iopub.execute_input":"2024-07-20T12:38:17.419935Z","iopub.status.idle":"2024-07-20T12:38:18.410901Z","shell.execute_reply.started":"2024-07-20T12:38:17.419904Z","shell.execute_reply":"2024-07-20T12:38:18.409874Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Split DOB to three feature\ndf[\"TransactionY\"] = df[\"TransactionDate\"].str.split(\"/\").map(lambda x: x[0] if type(x) == list else x)\ndf[\"TransactionM\"] = df[\"TransactionDate\"].str.split(\"/\").map(lambda x: x[1] if type(x) == list else x)\ndf[\"TransactionD\"] = df[\"TransactionDate\"].str.split(\"/\").map(lambda x: x[2] if type(x) == list else x)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:18.412260Z","iopub.execute_input":"2024-07-20T12:38:18.412576Z","iopub.status.idle":"2024-07-20T12:38:26.039185Z","shell.execute_reply.started":"2024-07-20T12:38:18.412550Z","shell.execute_reply":"2024-07-20T12:38:26.038045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Transaction Year","metadata":{}},{"cell_type":"code","source":"df[\"TransactionY\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:26.041660Z","iopub.execute_input":"2024-07-20T12:38:26.042014Z","iopub.status.idle":"2024-07-20T12:38:26.165410Z","shell.execute_reply.started":"2024-07-20T12:38:26.041971Z","shell.execute_reply":"2024-07-20T12:38:26.164384Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Only 16 in year of transaction data","metadata":{}},{"cell_type":"markdown","source":"Transaction Month","metadata":{}},{"cell_type":"code","source":"ax = sns.countplot(x=df[\"TransactionM\"].dropna().astype(int).sort_values())\nax.bar_label(ax.containers[0], fmt=lambda x: f\"{int(x)}\", size=12)\nplt.xlabel(\"Month\")\nplt.xticks(size=8)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:26.166748Z","iopub.execute_input":"2024-07-20T12:38:26.167068Z","iopub.status.idle":"2024-07-20T12:38:26.639047Z","shell.execute_reply.started":"2024-07-20T12:38:26.167041Z","shell.execute_reply":"2024-07-20T12:38:26.638012Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Transaction Day","metadata":{}},{"cell_type":"code","source":"sns.histplot(df[\"TransactionD\"].dropna().astype(int).sort_values())\n\nplt.xticks(ticks=range(1, 32, 2), size=8)\nplt.xlabel(\"Days\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:26.640412Z","iopub.execute_input":"2024-07-20T12:38:26.640826Z","iopub.status.idle":"2024-07-20T12:38:28.122195Z","shell.execute_reply.started":"2024-07-20T12:38:26.640788Z","shell.execute_reply":"2024-07-20T12:38:28.120955Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Weekday","metadata":{}},{"cell_type":"code","source":"df[\"Transaction_weekday\"] = df[\"TransactionDate\"].map(lambda x : \n                                                      pd.Timestamp(int(x.split(\"/\")[0]),\n                                                                   int(x.split(\"/\")[1]),\n                                                                   int(x.split(\"/\")[2])).weekday()) + 1","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:28.123383Z","iopub.execute_input":"2024-07-20T12:38:28.123794Z","iopub.status.idle":"2024-07-20T12:38:32.043873Z","shell.execute_reply.started":"2024-07-20T12:38:28.123755Z","shell.execute_reply":"2024-07-20T12:38:32.042957Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ax = sns.countplot(x=df[\"Transaction_weekday\"].dropna().astype(int).sort_values())\nax.bar_label(ax.containers[0], fmt=lambda x: f\"{int(x)}\", size=12)\nplt.xlabel(\"Weekday\")\nplt.xticks(size=8)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:32.045173Z","iopub.execute_input":"2024-07-20T12:38:32.045514Z","iopub.status.idle":"2024-07-20T12:38:32.409204Z","shell.execute_reply.started":"2024-07-20T12:38:32.045483Z","shell.execute_reply":"2024-07-20T12:38:32.407937Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Most of people transaction on Sunday.","metadata":{}},{"cell_type":"markdown","source":"## Numeric Data","metadata":{}},{"cell_type":"markdown","source":"**CustAccountBalance**","metadata":{}},{"cell_type":"markdown","source":"We average same customer's balance or diff to merge data.","metadata":{}},{"cell_type":"code","source":"avg_cus_balance = df.groupby(\"CustomerID\")[\"CustAccountBalance\"].agg(np.mean)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:32.410697Z","iopub.execute_input":"2024-07-20T12:38:32.411167Z","iopub.status.idle":"2024-07-20T12:38:34.796204Z","shell.execute_reply.started":"2024-07-20T12:38:32.411125Z","shell.execute_reply":"2024-07-20T12:38:34.795050Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.boxplot(avg_cus_balance.values)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:34.799876Z","iopub.execute_input":"2024-07-20T12:38:34.800237Z","iopub.status.idle":"2024-07-20T12:38:35.475258Z","shell.execute_reply.started":"2024-07-20T12:38:34.800206Z","shell.execute_reply":"2024-07-20T12:38:35.474040Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Their are lots of large values, which means some customer has higher savings but most have lower savings.","metadata":{}},{"cell_type":"markdown","source":"**TransactionTime**","metadata":{}},{"cell_type":"code","source":"# Transform to india time zone\ndf[\"TransactionTime\"] = df[\"TransactionTime\"].map(lambda x : pd.Timestamp(x, unit='s', tz='Asia/Kolkata')).dt.strftime('%H:%M:%S')","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:38:35.476644Z","iopub.execute_input":"2024-07-20T12:38:35.477087Z","iopub.status.idle":"2024-07-20T12:39:02.684177Z","shell.execute_reply.started":"2024-07-20T12:38:35.477046Z","shell.execute_reply":"2024-07-20T12:39:02.683054Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[\"Transaction_hour\"] = df[\"TransactionTime\"].map(lambda x : x.split(\":\")[0])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:39:02.685810Z","iopub.execute_input":"2024-07-20T12:39:02.686257Z","iopub.status.idle":"2024-07-20T12:39:03.119771Z","shell.execute_reply.started":"2024-07-20T12:39:02.686217Z","shell.execute_reply":"2024-07-20T12:39:03.118757Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.countplot(x=df[\"Transaction_hour\"].sort_values())\nplt.xticks(size=8)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:39:03.121071Z","iopub.execute_input":"2024-07-20T12:39:03.121445Z","iopub.status.idle":"2024-07-20T12:39:06.942265Z","shell.execute_reply.started":"2024-07-20T12:39:03.121370Z","shell.execute_reply":"2024-07-20T12:39:06.941132Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Most people transacte at 1:00 PM.","metadata":{}},{"cell_type":"markdown","source":"**TransactionAmount (INR)**","metadata":{}},{"cell_type":"code","source":"avg_cus_tans = df.groupby(\"CustomerID\")[\"CustAccountBalance\"].agg(np.mean)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:39:06.943703Z","iopub.execute_input":"2024-07-20T12:39:06.944088Z","iopub.status.idle":"2024-07-20T12:39:09.319888Z","shell.execute_reply.started":"2024-07-20T12:39:06.944057Z","shell.execute_reply":"2024-07-20T12:39:09.318565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.boxplot(avg_cus_tans.values)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:39:09.321473Z","iopub.execute_input":"2024-07-20T12:39:09.321833Z","iopub.status.idle":"2024-07-20T12:39:09.986194Z","shell.execute_reply.started":"2024-07-20T12:39:09.321803Z","shell.execute_reply":"2024-07-20T12:39:09.984952Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- It seems like transaction amount is like balance, both have a lot outliers. This mean some people have high transaction durning this time.","metadata":{}},{"cell_type":"markdown","source":"# Missing value","metadata":{}},{"cell_type":"markdown","source":"**CustomerDOB**","metadata":{}},{"cell_type":"code","source":"df[\"CustomerDOB\"] = df[\"CustomerDOB\"].replace(\"1/1/1800\", np.nan)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:39:09.987511Z","iopub.execute_input":"2024-07-20T12:39:09.987996Z","iopub.status.idle":"2024-07-20T12:39:10.121254Z","shell.execute_reply.started":"2024-07-20T12:39:09.987934Z","shell.execute_reply":"2024-07-20T12:39:10.120044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Fill by mutiple times' transaction customer","metadata":{}},{"cell_type":"code","source":"def fill_missing_values(group):\n    return group.sort_values().fillna(method=\"ffill\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:39:10.122852Z","iopub.execute_input":"2024-07-20T12:39:10.123222Z","iopub.status.idle":"2024-07-20T12:39:10.128843Z","shell.execute_reply.started":"2024-07-20T12:39:10.123191Z","shell.execute_reply":"2024-07-20T12:39:10.127392Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"b_filling = np.sum(df[\"CustomerDOB\"].isna())\nfilled_dob = df.groupby(\"CustomerID\")[\"CustomerDOB\"].transform(fill_missing_values)\ndf[\"CustomerDOB\"] = filled_dob","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:39:10.130524Z","iopub.execute_input":"2024-07-20T12:39:10.131540Z","iopub.status.idle":"2024-07-20T12:45:49.647773Z","shell.execute_reply.started":"2024-07-20T12:39:10.131495Z","shell.execute_reply":"2024-07-20T12:45:49.646507Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"Before filling: {b_filling}\\nAfter filling: {np.sum(filled_dob.isna())}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:45:49.649081Z","iopub.execute_input":"2024-07-20T12:45:49.649428Z","iopub.status.idle":"2024-07-20T12:45:49.720011Z","shell.execute_reply.started":"2024-07-20T12:45:49.649399Z","shell.execute_reply":"2024-07-20T12:45:49.718732Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**CustGender**","metadata":{}},{"cell_type":"code","source":"b_filling = np.sum(df[\"CustGender\"].isna())\nfilled_gender = df.groupby(\"CustomerID\")[\"CustGender\"].transform(fill_missing_values)\ndf[\"CustGender\"] = filled_gender","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:45:49.721336Z","iopub.execute_input":"2024-07-20T12:45:49.721813Z","iopub.status.idle":"2024-07-20T12:52:11.104919Z","shell.execute_reply.started":"2024-07-20T12:45:49.721772Z","shell.execute_reply":"2024-07-20T12:52:11.103814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"Before filling: {b_filling}\\nAfter filling: {np.sum(filled_gender.isna())}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:52:11.106296Z","iopub.execute_input":"2024-07-20T12:52:11.106641Z","iopub.status.idle":"2024-07-20T12:52:11.159467Z","shell.execute_reply.started":"2024-07-20T12:52:11.106611Z","shell.execute_reply":"2024-07-20T12:52:11.158351Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**CustLocation**","metadata":{}},{"cell_type":"code","source":"b_filling = np.sum(df[\"CustLocation\"].isna())\nfilled_loc = df.groupby(\"CustomerID\")[\"CustLocation\"].transform(fill_missing_values)\ndf[\"CustLocation\"] = filled_loc","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:52:11.160990Z","iopub.execute_input":"2024-07-20T12:52:11.161329Z","iopub.status.idle":"2024-07-20T12:58:43.760883Z","shell.execute_reply.started":"2024-07-20T12:52:11.161300Z","shell.execute_reply":"2024-07-20T12:58:43.759747Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"Before filling: {b_filling}\\nAfter filling: {np.sum(filled_loc.isna())}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:58:43.762503Z","iopub.execute_input":"2024-07-20T12:58:43.762838Z","iopub.status.idle":"2024-07-20T12:58:43.816699Z","shell.execute_reply.started":"2024-07-20T12:58:43.762809Z","shell.execute_reply":"2024-07-20T12:58:43.815412Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**CustAccountBalance**","metadata":{}},{"cell_type":"code","source":"b_filling = np.sum(df[\"CustAccountBalance\"].isna())\nfilled_bal = df.groupby(\"CustomerID\")[\"CustAccountBalance\"].transform(fill_missing_values)\ndf[\"CustAccountBalance\"] = filled_bal","metadata":{"execution":{"iopub.status.busy":"2024-07-20T12:58:43.818004Z","iopub.execute_input":"2024-07-20T12:58:43.818361Z","iopub.status.idle":"2024-07-20T13:03:51.311798Z","shell.execute_reply.started":"2024-07-20T12:58:43.818322Z","shell.execute_reply":"2024-07-20T13:03:51.310801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(f\"Before filling: {b_filling}\\nAfter filling: {np.sum(filled_bal.isna())}\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T13:03:51.313036Z","iopub.execute_input":"2024-07-20T13:03:51.313345Z","iopub.status.idle":"2024-07-20T13:03:51.319684Z","shell.execute_reply.started":"2024-07-20T13:03:51.313304Z","shell.execute_reply":"2024-07-20T13:03:51.318705Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Feature Enginner","metadata":{}},{"cell_type":"markdown","source":"**Age**","metadata":{}},{"cell_type":"code","source":"df[\"Customerage\"] = df[\"CustomerDOB\"].map(lambda x: 100 - int(x.split(\"/\")[2]) + 16 + 1 if type(x) == str else x)","metadata":{"execution":{"iopub.status.busy":"2024-07-20T13:03:51.321183Z","iopub.execute_input":"2024-07-20T13:03:51.321966Z","iopub.status.idle":"2024-07-20T13:03:52.175839Z","shell.execute_reply.started":"2024-07-20T13:03:51.321925Z","shell.execute_reply":"2024-07-20T13:03:52.174755Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Trans_proportion**","metadata":{}},{"cell_type":"code","source":"df[\"trans_proportion\"] = df[\"TransactionAmount (INR)\"] / (df[\"CustAccountBalance\"] + df[\"TransactionAmount (INR)\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T13:03:52.177313Z","iopub.execute_input":"2024-07-20T13:03:52.177771Z","iopub.status.idle":"2024-07-20T13:03:52.190956Z","shell.execute_reply.started":"2024-07-20T13:03:52.177730Z","shell.execute_reply":"2024-07-20T13:03:52.189702Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.histplot(df[\"trans_proportion\"])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T13:03:52.196689Z","iopub.execute_input":"2024-07-20T13:03:52.197070Z","iopub.status.idle":"2024-07-20T13:03:54.099812Z","shell.execute_reply.started":"2024-07-20T13:03:52.197038Z","shell.execute_reply":"2024-07-20T13:03:54.098510Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- Proportion close 1.0 means they trans most of savings in one transaction.","metadata":{}},{"cell_type":"markdown","source":"Let's group same customer wiht mean.","metadata":{}},{"cell_type":"code","source":"sns.histplot(df.groupby(\"CustomerID\")[\"trans_proportion\"].agg(np.mean))","metadata":{"execution":{"iopub.status.busy":"2024-07-20T13:03:54.101199Z","iopub.execute_input":"2024-07-20T13:03:54.101545Z","iopub.status.idle":"2024-07-20T13:03:58.886896Z","shell.execute_reply.started":"2024-07-20T13:03:54.101516Z","shell.execute_reply":"2024-07-20T13:03:58.885801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"*Notes*\n\n- The proportion 0.3-0.5 are not appear in the histplot which we don't group. This means some people have large diffent transaction amount in different times.","metadata":{}},{"cell_type":"markdown","source":"**Multiple times transaction**","metadata":{}},{"cell_type":"code","source":"cusid_trans_times = df.groupby([\"CustomerID\"]).size()","metadata":{"execution":{"iopub.status.busy":"2024-07-20T13:03:58.888424Z","iopub.execute_input":"2024-07-20T13:03:58.888838Z","iopub.status.idle":"2024-07-20T13:04:01.324056Z","shell.execute_reply.started":"2024-07-20T13:03:58.888809Z","shell.execute_reply":"2024-07-20T13:04:01.322889Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df[\"transaction_times\"] = df[\"CustomerID\"].map(lambda x : cusid_trans_times[x])","metadata":{"execution":{"iopub.status.busy":"2024-07-20T13:04:01.325457Z","iopub.execute_input":"2024-07-20T13:04:01.325910Z","iopub.status.idle":"2024-07-20T13:04:07.380867Z","shell.execute_reply.started":"2024-07-20T13:04:01.325868Z","shell.execute_reply":"2024-07-20T13:04:07.379808Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.to_csv(\"df.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-07-20T13:04:08.085840Z","iopub.execute_input":"2024-07-20T13:04:08.086265Z","iopub.status.idle":"2024-07-20T13:04:19.966776Z","shell.execute_reply.started":"2024-07-20T13:04:08.086229Z","shell.execute_reply":"2024-07-20T13:04:19.965612Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/processing-df/df.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:11:55.412825Z","iopub.execute_input":"2024-07-21T04:11:55.413605Z","iopub.status.idle":"2024-07-21T04:12:01.602368Z","shell.execute_reply.started":"2024-07-21T04:11:55.413572Z","shell.execute_reply":"2024-07-21T04:12:01.601053Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"# Feature For Clustering","metadata":{}},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:12:01.603952Z","iopub.execute_input":"2024-07-21T04:12:01.604471Z","iopub.status.idle":"2024-07-21T04:12:01.656742Z","shell.execute_reply.started":"2024-07-21T04:12:01.604428Z","shell.execute_reply":"2024-07-21T04:12:01.655515Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"   Unnamed: 0 TransactionID CustomerID CustomerDOB CustGender CustLocation  \\\n0           0            T1   C5841053     10/1/94          F   JAMSHEDPUR   \n1           1            T2   C2142763      4/4/57          M      JHAJJAR   \n2           2            T3   C4417068    26/11/96          F       MUMBAI   \n3           3            T4   C5342380     14/9/73          F       MUMBAI   \n4           4            T5   C9031234     24/3/88          F  NAVI MUMBAI   \n\n   CustAccountBalance TransactionDate TransactionTime  \\\n0            17819.05        2016/8/2        21:16:47   \n1             2270.69        2016/8/2        20:54:18   \n2            17874.44        2016/8/2        21:08:32   \n3           866503.21        2016/8/2        21:08:34   \n4             6714.43        2016/8/2        07:49:16   \n\n   TransactionAmount (INR)  ...  CustomerMOB  CustomerDaOB  TransactionY  \\\n0                     25.0  ...          1.0          10.0          2016   \n1                  27999.0  ...          4.0           4.0          2016   \n2                    459.0  ...         11.0          26.0          2016   \n3                   2060.0  ...          9.0          14.0          2016   \n4                   1762.5  ...          3.0          24.0          2016   \n\n   TransactionM  TransactionD  Transaction_weekday  Transaction_hour  \\\n0             8             2                    2                21   \n1             8             2                    2                20   \n2             8             2                    2                21   \n3             8             2                    2                21   \n4             8             2                    2                 7   \n\n   Customerage  trans_proportion  transaction_times  \n0         23.0          0.001401                  1  \n1         60.0          0.924985                  1  \n2         21.0          0.025036                  1  \n3         44.0          0.002372                  2  \n4         29.0          0.207917                  1  \n\n[5 rows x 21 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>TransactionID</th>\n      <th>CustomerID</th>\n      <th>CustomerDOB</th>\n      <th>CustGender</th>\n      <th>CustLocation</th>\n      <th>CustAccountBalance</th>\n      <th>TransactionDate</th>\n      <th>TransactionTime</th>\n      <th>TransactionAmount (INR)</th>\n      <th>...</th>\n      <th>CustomerMOB</th>\n      <th>CustomerDaOB</th>\n      <th>TransactionY</th>\n      <th>TransactionM</th>\n      <th>TransactionD</th>\n      <th>Transaction_weekday</th>\n      <th>Transaction_hour</th>\n      <th>Customerage</th>\n      <th>trans_proportion</th>\n      <th>transaction_times</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>T1</td>\n      <td>C5841053</td>\n      <td>10/1/94</td>\n      <td>F</td>\n      <td>JAMSHEDPUR</td>\n      <td>17819.05</td>\n      <td>2016/8/2</td>\n      <td>21:16:47</td>\n      <td>25.0</td>\n      <td>...</td>\n      <td>1.0</td>\n      <td>10.0</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n      <td>2</td>\n      <td>21</td>\n      <td>23.0</td>\n      <td>0.001401</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>T2</td>\n      <td>C2142763</td>\n      <td>4/4/57</td>\n      <td>M</td>\n      <td>JHAJJAR</td>\n      <td>2270.69</td>\n      <td>2016/8/2</td>\n      <td>20:54:18</td>\n      <td>27999.0</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>4.0</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n      <td>2</td>\n      <td>20</td>\n      <td>60.0</td>\n      <td>0.924985</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>T3</td>\n      <td>C4417068</td>\n      <td>26/11/96</td>\n      <td>F</td>\n      <td>MUMBAI</td>\n      <td>17874.44</td>\n      <td>2016/8/2</td>\n      <td>21:08:32</td>\n      <td>459.0</td>\n      <td>...</td>\n      <td>11.0</td>\n      <td>26.0</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n      <td>2</td>\n      <td>21</td>\n      <td>21.0</td>\n      <td>0.025036</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>T4</td>\n      <td>C5342380</td>\n      <td>14/9/73</td>\n      <td>F</td>\n      <td>MUMBAI</td>\n      <td>866503.21</td>\n      <td>2016/8/2</td>\n      <td>21:08:34</td>\n      <td>2060.0</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>14.0</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n      <td>2</td>\n      <td>21</td>\n      <td>44.0</td>\n      <td>0.002372</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>T5</td>\n      <td>C9031234</td>\n      <td>24/3/88</td>\n      <td>F</td>\n      <td>NAVI MUMBAI</td>\n      <td>6714.43</td>\n      <td>2016/8/2</td>\n      <td>07:49:16</td>\n      <td>1762.5</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>24.0</td>\n      <td>2016</td>\n      <td>8</td>\n      <td>2</td>\n      <td>2</td>\n      <td>7</td>\n      <td>29.0</td>\n      <td>0.207917</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"cluster_features = [\"CustGender\", \"CustAccountBalance\",\n                    \"TransactionAmount (INR)\",\n                    \"Transaction_weekday\", \"Transaction_hour\",\n                    \"Customerage\", \"trans_proportion\",\n                    \"transaction_times\"]","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:12:01.658012Z","iopub.execute_input":"2024-07-21T04:12:01.658382Z","iopub.status.idle":"2024-07-21T04:12:01.664256Z","shell.execute_reply.started":"2024-07-21T04:12:01.658346Z","shell.execute_reply":"2024-07-21T04:12:01.663038Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"pd.concat([pd.DataFrame(df.loc[:, cluster_features].isna().apply(sum, axis=0)),\n           (df.loc[:, cluster_features].isna().apply(sum, axis=0)/df.shape[0])*100],\n          axis=1).set_axis([\"Counts\", \"Ratio\"], axis=\"columns\")","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:12:01.665867Z","iopub.execute_input":"2024-07-21T04:12:01.666299Z","iopub.status.idle":"2024-07-21T04:12:04.188552Z","shell.execute_reply.started":"2024-07-21T04:12:01.666256Z","shell.execute_reply":"2024-07-21T04:12:04.187275Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"                         Counts     Ratio\nCustGender                  803  0.076581\nCustAccountBalance         1666  0.158884\nTransactionAmount (INR)       0  0.000000\nTransaction_weekday           0  0.000000\nTransaction_hour              0  0.000000\nCustomerage               43887  4.185426\ntrans_proportion           1670  0.159265\ntransaction_times             0  0.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Counts</th>\n      <th>Ratio</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>CustGender</th>\n      <td>803</td>\n      <td>0.076581</td>\n    </tr>\n    <tr>\n      <th>CustAccountBalance</th>\n      <td>1666</td>\n      <td>0.158884</td>\n    </tr>\n    <tr>\n      <th>TransactionAmount (INR)</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Transaction_weekday</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Transaction_hour</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>Customerage</th>\n      <td>43887</td>\n      <td>4.185426</td>\n    </tr>\n    <tr>\n      <th>trans_proportion</th>\n      <td>1670</td>\n      <td>0.159265</td>\n    </tr>\n    <tr>\n      <th>transaction_times</th>\n      <td>0</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"*Notes*\n\n- The reason we dropna here:\n    1. The NA ratio lower than 1 besides Customerage\n    2. We will do clustering later, and we don't want fill data to affect data.","metadata":{}},{"cell_type":"markdown","source":"# Preprocessing","metadata":{}},{"cell_type":"code","source":"df = df.loc[:, cluster_features].dropna()","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:12:04.189925Z","iopub.execute_input":"2024-07-21T04:12:04.190265Z","iopub.status.idle":"2024-07-21T04:12:04.387392Z","shell.execute_reply.started":"2024-07-21T04:12:04.190237Z","shell.execute_reply":"2024-07-21T04:12:04.386132Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:12:04.391247Z","iopub.execute_input":"2024-07-21T04:12:04.391660Z","iopub.status.idle":"2024-07-21T04:12:04.413567Z","shell.execute_reply.started":"2024-07-21T04:12:04.391627Z","shell.execute_reply":"2024-07-21T04:12:04.412198Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"        CustGender  CustAccountBalance  TransactionAmount (INR)  \\\n0                F            17819.05                     25.0   \n1                M             2270.69                  27999.0   \n2                F            17874.44                    459.0   \n3                F           866503.21                   2060.0   \n4                F             6714.43                   1762.5   \n...            ...                 ...                      ...   \n1048562          M             7635.19                    799.0   \n1048563          M            27311.42                    460.0   \n1048564          M           221757.06                    770.0   \n1048565          M            10117.87                   1000.0   \n1048566          M            75734.42                   1166.0   \n\n         Transaction_weekday  Transaction_hour  Customerage  trans_proportion  \\\n0                          2                21         23.0          0.001401   \n1                          2                20         60.0          0.924985   \n2                          2                21         21.0          0.025036   \n3                          2                21         44.0          0.002372   \n4                          2                 7         29.0          0.207917   \n...                      ...               ...          ...               ...   \n1048562                    7                 8         27.0          0.094733   \n1048563                    7                 8         25.0          0.016564   \n1048564                    7                 8         28.0          0.003460   \n1048565                    7                 8         39.0          0.089945   \n1048566                    7                 7         33.0          0.015162   \n\n         transaction_times  \n0                        1  \n1                        1  \n2                        1  \n3                        2  \n4                        1  \n...                    ...  \n1048562                  1  \n1048563                  1  \n1048564                  2  \n1048565                  1  \n1048566                  2  \n\n[1003019 rows x 8 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CustGender</th>\n      <th>CustAccountBalance</th>\n      <th>TransactionAmount (INR)</th>\n      <th>Transaction_weekday</th>\n      <th>Transaction_hour</th>\n      <th>Customerage</th>\n      <th>trans_proportion</th>\n      <th>transaction_times</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>F</td>\n      <td>17819.05</td>\n      <td>25.0</td>\n      <td>2</td>\n      <td>21</td>\n      <td>23.0</td>\n      <td>0.001401</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>M</td>\n      <td>2270.69</td>\n      <td>27999.0</td>\n      <td>2</td>\n      <td>20</td>\n      <td>60.0</td>\n      <td>0.924985</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>F</td>\n      <td>17874.44</td>\n      <td>459.0</td>\n      <td>2</td>\n      <td>21</td>\n      <td>21.0</td>\n      <td>0.025036</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>F</td>\n      <td>866503.21</td>\n      <td>2060.0</td>\n      <td>2</td>\n      <td>21</td>\n      <td>44.0</td>\n      <td>0.002372</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>F</td>\n      <td>6714.43</td>\n      <td>1762.5</td>\n      <td>2</td>\n      <td>7</td>\n      <td>29.0</td>\n      <td>0.207917</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1048562</th>\n      <td>M</td>\n      <td>7635.19</td>\n      <td>799.0</td>\n      <td>7</td>\n      <td>8</td>\n      <td>27.0</td>\n      <td>0.094733</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1048563</th>\n      <td>M</td>\n      <td>27311.42</td>\n      <td>460.0</td>\n      <td>7</td>\n      <td>8</td>\n      <td>25.0</td>\n      <td>0.016564</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1048564</th>\n      <td>M</td>\n      <td>221757.06</td>\n      <td>770.0</td>\n      <td>7</td>\n      <td>8</td>\n      <td>28.0</td>\n      <td>0.003460</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1048565</th>\n      <td>M</td>\n      <td>10117.87</td>\n      <td>1000.0</td>\n      <td>7</td>\n      <td>8</td>\n      <td>39.0</td>\n      <td>0.089945</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1048566</th>\n      <td>M</td>\n      <td>75734.42</td>\n      <td>1166.0</td>\n      <td>7</td>\n      <td>7</td>\n      <td>33.0</td>\n      <td>0.015162</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>1003019 rows × 8 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Scale numerical data to have mean=0 and variance=1\nnumerical_transformer = Pipeline(steps=[('scaler', StandardScaler())])\ncategorical_transformer = Pipeline(steps=[(\"onehot\", OneHotEncoder())])","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Combine preprocessing\ndis_ct = ColumnTransformer(\n                        transformers=[\n                            ('cat', categorical_transformer, [\"CustGender\"]),\n                            ('pass', \"passthrough\", [\"trans_proportion\", \"transaction_times\",\n                                                     \"Customerage\",  \"Transaction_weekday\",\n                                                     \"Transaction_hour\"])\n                        ],\n                            remainder='drop')\n\n# Apply preprocessing\ndis_X = dis_ct.fit_transform(df)\n\n# Print new shape\nprint('df shape:', dis_X.shape)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Combine preprocessing\nct = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer,[\"CustAccountBalance\", \"TransactionAmount (INR)\", \"Customerage\"]),\n        ('cat', categorical_transformer, [\"CustGender\", \"Transaction_weekday\", \"Transaction_hour\"]),\n        ('pass', \"passthrough\", [\"trans_proportion\", \"transaction_times\"])\n    ],\n        remainder='passthrough')\n\n# Apply preprocessing\nX = ct.fit_transform(df)\n\n# Print new shape\nprint('df shape:', X.shape)","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:12:04.415021Z","iopub.execute_input":"2024-07-21T04:12:04.415409Z","iopub.status.idle":"2024-07-21T04:12:05.396081Z","shell.execute_reply.started":"2024-07-21T04:12:04.415376Z","shell.execute_reply":"2024-07-21T04:12:05.394750Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"df shape: (1003019, 38)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model","metadata":{}},{"cell_type":"code","source":"from kmodes import kmodes\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.manifold import MDS\nfrom sklearn.metrics import silhouette_samples","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:12:05.397424Z","iopub.execute_input":"2024-07-21T04:12:05.397776Z","iopub.status.idle":"2024-07-21T04:12:05.404844Z","shell.execute_reply.started":"2024-07-21T04:12:05.397747Z","shell.execute_reply":"2024-07-21T04:12:05.403686Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"Clustering Models:\n\n- Linear Clustering:\n    1. K-mean(cosine similarity), K-Modes\n    2. Hierarchical\n    3. PCA\n    4. LDA\n- non-Linear Clustering:\n    5. t-SNE\n    6. DBSCAN\n    7. UMAP","metadata":{}},{"cell_type":"markdown","source":"**K-Modes**","metadata":{}},{"cell_type":"markdown","source":"Elbow","metadata":{}},{"cell_type":"code","source":"cost = []\nK = range(1, 10)\n\nfor num_clusters in K:\n    kmode = KModes(n_clusters=num_clusters, init='Cao', n_init=5, verbose=1)\n    clusters = kmode.fit_predict(X)\n    cost.append(kmode.cost_)\n\nplt.plot(K, cost, 'bx-')\nplt.xlabel('Number of clusters')\nplt.ylabel('Cost')\nplt.title('Elbow Method For Optimal k')\nplt.show()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"optimal_k = 3  # Replace this with the optimal number of clusters from the elbow plot\n\nkmode = KModes(n_clusters=optimal_k, init='Cao', n_init=5, verbose=1)\nclusters = kmode.fit_predict(df)\n\ndf['Cluster'] = clusters\nprint(df)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Silhouette","metadata":{}},{"cell_type":"code","source":"def silhouette_plot(X, cluster_labels):\n    n_clusters = len(np.unique(cluster_labels))\n    silhouette_vals = silhouette_samples(X, cluster_labels, metric='precomputed')\n\n    y_lower, y_upper = 0, 0\n    yticks = []\n    for i in range(n_clusters):\n        c_silhouette_vals = silhouette_vals[cluster_labels == i]\n        c_silhouette_vals.sort()\n        y_upper += len(c_silhouette_vals)\n        plt.barh(range(y_lower, y_upper), c_silhouette_vals, height=1.0)\n        yticks.append((y_lower + y_upper) / 2)\n        y_lower += len(c_silhouette_vals)\n\n    silhouette_avg = np.mean(silhouette_vals)\n    plt.axvline(silhouette_avg, color=\"red\", linestyle=\"--\")\n    plt.yticks(yticks, [f'Cluster {i + 1}' for i in range(n_clusters)])\n    plt.ylabel('Cluster')\n    plt.xlabel('Silhouette Coefficient')\n    plt.title('Silhouette Plot')\n    plt.show()\n\n# Create the silhouette plot\nsilhouette_plot(dissimilarity_matrix, clusters)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**K-Means**","metadata":{}},{"cell_type":"code","source":"# Compute cosine similarity matrix\ncosine_sim_matrix = cosine_similarity(X)\n\n# Transform cosine similarity matrix to cosine distance matrix\ncosine_dist_matrix = 1 - cosine_sim_matrix\n\n# Project the distance matrix into a 2D space\nmds = MDS(n_components=2, dissimilarity='precomputed', random_state=42)\ndata_transformed = mds.fit_transform(cosine_dist_matrix)","metadata":{"execution":{"iopub.status.busy":"2024-07-21T04:12:50.288799Z","iopub.execute_input":"2024-07-21T04:12:50.289308Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Elbow","metadata":{}},{"cell_type":"code","source":"distortions = []\n\nfor i in range(1, 11):\n    km = KMeans(n_clusters=i,\n                init=\"k-means++\",\n                n_init=10,\n                max_iter=300,\n                random_state=42)\n    km.fit(data_transformed)\n    distortions.append(data_transformed.inertia_)\n\nsns.lineplot(x=range(1, 11), y=distortions, marker=\"o\")\nplt.xlabel(\"Number if clusters\")\nplt.ylabel(\"Distortions\")\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-21T02:50:30.407450Z","iopub.execute_input":"2024-07-21T02:50:30.407868Z","iopub.status.idle":"2024-07-21T02:57:52.756710Z","shell.execute_reply.started":"2024-07-21T02:50:30.407839Z","shell.execute_reply":"2024-07-21T02:57:52.755391Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Apply K-means on the transformed data\noptimize_kmeans_cluster = 3\n\nkmeans = KMeans(n_clusters=optimize_kmeans_cluster, random_state=42)\nkmeans.fit(data_transformed)\n\n# Get the cluster labels\nlabels = kmeans.labels_\nprint(labels)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Silhouette","metadata":{}},{"cell_type":"code","source":"km = KMeans(n_clusters=optimize_kmeans_cluster,\n                init=\"k-means++\",\n                n_init=10,\n                max_iter=300,\n                random_state=42)\ny_km = km.fit_predict(X)","metadata":{},"execution_count":null,"outputs":[]}]}