{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":34377,"databundleVersionId":3220602,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"provenance":[],"include_colab_link":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<a href=\"https://colab.research.google.com/github/mushroom3969/Kaggle/blob/main/Data_Science_template_3.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>","metadata":{"id":"view-in-github"}},{"cell_type":"markdown","source":"# Table Content","metadata":{"id":"dDsXrIPZnK38"}},{"cell_type":"markdown","source":"# Define the Problem","metadata":{"id":"UlPIAf9GnK3-"}},{"cell_type":"markdown","source":"🎯Goal : Predicting whether a passenger was transported to an alternate dimension during the Spaceship Titanic's collision with the spacetime anomaly. \n\n- File : \n   - train.csv: 2/3 passengers as training data\n   - test.csv: 1/3 passengers as testing data\n   - sample_submission.csv: Correct format for submiting\n   \n- Features:\n    - PassengerId - A **unique Id** for each passenger. Each Id takes the form gggg_pp where gggg indicates a group the passenger is travelling with and pp is their number within the group. **People in a group are often family members, but not always.**\n    - HomePlanet - The planet the passenger **departed from**, typically their planet of permanent residence.\n    - CryoSleep - Indicates **whether the passenger elected to be put into suspended animation for the duration of the voyage**. Passengers in cryosleep are confined to their cabins.\n    - Cabin - The **cabin number where the passenger is staying**. Takes the form **deck/num/side, where side can be either P for Port or S for Starboard**.\n    - Destination - The planet the passenger will be debarking to.\n    - Age - The age of the passenger.\n    - VIP - Whether the passenger has paid for special VIP service during the voyage.\n    - RoomService, FoodCourt, ShoppingMall, Spa, VRDeck - **Amount the passenger has billed** at each of the Spaceship Titanic's many luxury amenities.\n    - Name - The first and last names of the passenger.\n    - Transported - Whether the passenger was transported to another dimension. This is the target, the column you are trying to predict.","metadata":{}},{"cell_type":"markdown","source":"----","metadata":{"id":"inffsbornK3-"}},{"cell_type":"markdown","source":"# Gather the Data","metadata":{"id":"TN04cvJEnK3-"}},{"cell_type":"markdown","source":"-----","metadata":{"id":"Dw0Gcn_JnK3_"}},{"cell_type":"markdown","source":"# Prepare Data","metadata":{"id":"vV-cTWNNnK3_"}},{"cell_type":"code","source":"!pip install chardet\n!pip install plotly","metadata":{"id":"Bu8HF4G2nK3_","execution":{"iopub.status.busy":"2024-06-03T11:27:03.359563Z","iopub.execute_input":"2024-06-03T11:27:03.359982Z","iopub.status.idle":"2024-06-03T11:27:35.067300Z","shell.execute_reply.started":"2024-06-03T11:27:03.359947Z","shell.execute_reply":"2024-06-03T11:27:35.066109Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"Collecting chardet\n  Downloading chardet-5.2.0-py3-none-any.whl.metadata (3.4 kB)\nDownloading chardet-5.2.0-py3-none-any.whl (199 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.4/199.4 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: chardet\nSuccessfully installed chardet-5.2.0\nRequirement already satisfied: plotly in /opt/conda/lib/python3.10/site-packages (5.18.0)\nRequirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.10/site-packages (from plotly) (8.2.3)\nRequirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from plotly) (21.3)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->plotly) (3.1.1)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Import Libraries","metadata":{"id":"c7TnwUPTnK3_"}},{"cell_type":"code","source":"import warnings\n\nfrom pathlib import Path\nimport os\nimport chardet\nimport requests\n\nimport pandas as pd\nimport numpy as np\n\n# Ignore FutureWarning\nwarnings.simplefilter(action='ignore', category=FutureWarning)","metadata":{"id":"kyri-tj2nK4A","execution":{"iopub.status.busy":"2024-06-03T12:21:10.430828Z","iopub.execute_input":"2024-06-03T12:21:10.431260Z","iopub.status.idle":"2024-06-03T12:21:10.437945Z","shell.execute_reply.started":"2024-06-03T12:21:10.431226Z","shell.execute_reply":"2024-06-03T12:21:10.436670Z"},"trusted":true},"execution_count":84,"outputs":[]},{"cell_type":"markdown","source":"### Visulize","metadata":{"id":"1YmkekpNnK4A"}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n\n# Seaborn\nimport seaborn as sns\n\n\n# Plotly\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport plotly.express as px","metadata":{"id":"XRRNjEQnnK4A","execution":{"iopub.status.busy":"2024-06-03T11:27:35.626744Z","iopub.execute_input":"2024-06-03T11:27:35.627650Z","iopub.status.idle":"2024-06-03T11:27:37.959131Z","shell.execute_reply.started":"2024-06-03T11:27:35.627617Z","shell.execute_reply":"2024-06-03T11:27:37.957778Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"### Model Library","metadata":{"id":"_ZNAAbL5nK4B"}},{"cell_type":"markdown","source":"----","metadata":{"id":"gpLyp6kbnK4B"}},{"cell_type":"markdown","source":"## Load Data","metadata":{"id":"hJcT0czCnK4B"}},{"cell_type":"code","source":"class LoadingFile():\n    def __init__(self, path, name, url=None):\n        self.path = path\n        self.name = name\n        self.url = url\n\n    def size(self):\n        kib = 1024\n        size = os.path.getsize(Path(self.path))\n        print(f\"{self.name} size: {np.round(size / kib)} Kib\")\n\n    def Encoding_predict(self):\n        file_path = Path(self.path)\n        with open(file_path, 'rb') as f:\n            contents = f.read()\n\n        encoding_info = chardet.detect(contents)\n\n        detected_encoding = encoding_info['encoding']\n        confidence = encoding_info['confidence']\n\n        print(f\"File name: {self.name:<25}\\nEncoding: {detected_encoding:<10}Confidence: {confidence}\")\n\n\n    def download_data(self):\n        data_path = Path(self.path)\n        if data_path.is_dir():\n            print(f\"{data_path} directory exist.\")\n        else:\n            print(f\"Creating {data_path}\")\n            data_path.mkdir(parents=True, exist_ok=True)\n\n        if (data_path / Path(self.name)).exists():\n            print(f\"{self.name} already exist\")\n            \n        else:\n            with open(data_path / self.name, \"wb\") as f:\n                req = requests.get(self.url)\n                print(\"Downloading data...\")\n                f.write(req.content)\n                print(\"Done!\")\nname=[]\npath = []\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        name.append(filename)\n        path.append(os.path.join(dirname, filename))\n\n        print(f\"Path: {dirname} | Data_Name: {filename}\")\n        size = LoadingFile(os.path.join(dirname, filename), filename).size()\n        print()\n\n#LoadingFile(path[0], name[0]).size()\n#LoadingFile(path[1], name[1]).size()","metadata":{"id":"vsy9-XCInK4B","execution":{"iopub.status.busy":"2024-06-03T11:27:37.962506Z","iopub.execute_input":"2024-06-03T11:27:37.963072Z","iopub.status.idle":"2024-06-03T11:27:37.984940Z","shell.execute_reply.started":"2024-06-03T11:27:37.963041Z","shell.execute_reply":"2024-06-03T11:27:37.983690Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Path: /kaggle/input/spaceship-titanic | Data_Name: sample_submission.csv\nsample_submission.csv size: 58.0 Kib\n\nPath: /kaggle/input/spaceship-titanic | Data_Name: train.csv\ntrain.csv size: 787.0 Kib\n\nPath: /kaggle/input/spaceship-titanic | Data_Name: test.csv\ntest.csv size: 364.0 Kib\n\n","output_type":"stream"}]},{"cell_type":"code","source":"origin_df = pd.read_csv(path[1])\norigin_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T11:27:37.986790Z","iopub.execute_input":"2024-06-03T11:27:37.987322Z","iopub.status.idle":"2024-06-03T11:27:38.096867Z","shell.execute_reply.started":"2024-06-03T11:27:37.987284Z","shell.execute_reply":"2024-06-03T11:27:38.095687Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n0     0001_01     Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n1     0002_01      Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n2     0003_01     Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n3     0003_02     Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n4     0004_01      Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n\n   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck               Name  \\\n0          0.0        0.0           0.0     0.0     0.0    Maham Ofracculy   \n1        109.0        9.0          25.0   549.0    44.0       Juanna Vines   \n2         43.0     3576.0           0.0  6715.0    49.0      Altark Susent   \n3          0.0     1283.0         371.0  3329.0   193.0       Solam Susent   \n4        303.0       70.0         151.0   565.0     2.0  Willy Santantines   \n\n   Transported  \n0        False  \n1         True  \n2        False  \n3        False  \n4         True  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>HomePlanet</th>\n      <th>CryoSleep</th>\n      <th>Cabin</th>\n      <th>Destination</th>\n      <th>Age</th>\n      <th>VIP</th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n      <th>Name</th>\n      <th>Transported</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0001_01</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>B/0/P</td>\n      <td>TRAPPIST-1e</td>\n      <td>39.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Maham Ofracculy</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0002_01</td>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>24.0</td>\n      <td>False</td>\n      <td>109.0</td>\n      <td>9.0</td>\n      <td>25.0</td>\n      <td>549.0</td>\n      <td>44.0</td>\n      <td>Juanna Vines</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0003_01</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>A/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>58.0</td>\n      <td>True</td>\n      <td>43.0</td>\n      <td>3576.0</td>\n      <td>0.0</td>\n      <td>6715.0</td>\n      <td>49.0</td>\n      <td>Altark Susent</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0003_02</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>A/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>33.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>1283.0</td>\n      <td>371.0</td>\n      <td>3329.0</td>\n      <td>193.0</td>\n      <td>Solam Susent</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0004_01</td>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/1/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>16.0</td>\n      <td>False</td>\n      <td>303.0</td>\n      <td>70.0</td>\n      <td>151.0</td>\n      <td>565.0</td>\n      <td>2.0</td>\n      <td>Willy Santantines</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"origin_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-06-03T11:27:38.098665Z","iopub.execute_input":"2024-06-03T11:27:38.099445Z","iopub.status.idle":"2024-06-03T11:27:38.107385Z","shell.execute_reply.started":"2024-06-03T11:27:38.099393Z","shell.execute_reply":"2024-06-03T11:27:38.106059Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(8693, 14)"},"metadata":{}}]},{"cell_type":"markdown","source":"### Feature classification","metadata":{}},{"cell_type":"code","source":"numeric_features = {\n    \"continuous\":[\"RoomService\", \"FoodCourt\",\"ShoppingMall\", \"Spa\", \"VRDeck\"],\n    \"discrete\":[\"Age\"]\n}\n\ncategorial_features = {\n    \"nominal\":[\"HomePlanet\", \"CryoSleep\", \"Destination\", \"VIP\"],\n    \"ordinal\":[]\n}\n\ntext_features = [\"PassengerId\", \"Cabin\", \"Name\"]\n\ntarget = \"Transported\"","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:03:15.882763Z","iopub.execute_input":"2024-06-03T12:03:15.883885Z","iopub.status.idle":"2024-06-03T12:03:15.890239Z","shell.execute_reply.started":"2024-06-03T12:03:15.883844Z","shell.execute_reply":"2024-06-03T12:03:15.888901Z"},"trusted":true},"execution_count":64,"outputs":[]},{"cell_type":"markdown","source":"----","metadata":{"id":"ZmPnf4oGnK4C"}},{"cell_type":"markdown","source":"## Processing_1","metadata":{"id":"J894d_LSnK4C"}},{"cell_type":"markdown","source":"### New Features `text_features`","metadata":{}},{"cell_type":"code","source":"# Two new aggfeatures from PassengerId\ngroup_number = origin_df[\"PassengerId\"].str.split(\"_\")\ngroup = []\nnumber = []\n\nfor g, n in group_number.values:\n    group.append(g)\n    number.append(n)\n    \norigin_df[\"group\"] = group\norigin_df[\"number\"] = number\n\ntext_features.extend([\"group\", \"number\"])","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:03:15.891500Z","iopub.execute_input":"2024-06-03T12:03:15.891839Z","iopub.status.idle":"2024-06-03T12:03:15.923001Z","shell.execute_reply.started":"2024-06-03T12:03:15.891810Z","shell.execute_reply":"2024-06-03T12:03:15.921691Z"},"trusted":true},"execution_count":65,"outputs":[]},{"cell_type":"code","source":"# Three new features deck/num/side \n\ncabin_of_three = origin_df[\"Cabin\"].str.split(\"/\")\ndeck = []\nnum = []\nside = []\n\n\nfor info in cabin_of_three.values:\n    if type(info) != list:\n        deck.append(np.nan)\n        num.append(np.nan)\n        side.append(np.nan)\n        continue\n        \n    deck.append(info[0])\n    num.append(info[1])\n    side.append(info[2])\n    \norigin_df[\"deck\"] = deck\norigin_df[\"num\"] = num\norigin_df[\"side\"] = side\n\ncategorial_features[\"nominal\"].extend([\"deck\", \"side\"])\ntext_features.extend([\"num\"])","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:03:15.925567Z","iopub.execute_input":"2024-06-03T12:03:15.926412Z","iopub.status.idle":"2024-06-03T12:03:15.959648Z","shell.execute_reply.started":"2024-06-03T12:03:15.926375Z","shell.execute_reply":"2024-06-03T12:03:15.958256Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"origin_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T11:27:38.195040Z","iopub.execute_input":"2024-06-03T11:27:38.195443Z","iopub.status.idle":"2024-06-03T11:27:38.221481Z","shell.execute_reply.started":"2024-06-03T11:27:38.195413Z","shell.execute_reply":"2024-06-03T11:27:38.220235Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"  PassengerId HomePlanet CryoSleep  Cabin  Destination   Age    VIP  \\\n0     0001_01     Europa     False  B/0/P  TRAPPIST-1e  39.0  False   \n1     0002_01      Earth     False  F/0/S  TRAPPIST-1e  24.0  False   \n2     0003_01     Europa     False  A/0/S  TRAPPIST-1e  58.0   True   \n3     0003_02     Europa     False  A/0/S  TRAPPIST-1e  33.0  False   \n4     0004_01      Earth     False  F/1/S  TRAPPIST-1e  16.0  False   \n\n   RoomService  FoodCourt  ShoppingMall     Spa  VRDeck               Name  \\\n0          0.0        0.0           0.0     0.0     0.0    Maham Ofracculy   \n1        109.0        9.0          25.0   549.0    44.0       Juanna Vines   \n2         43.0     3576.0           0.0  6715.0    49.0      Altark Susent   \n3          0.0     1283.0         371.0  3329.0   193.0       Solam Susent   \n4        303.0       70.0         151.0   565.0     2.0  Willy Santantines   \n\n   Transported group number deck num side  \n0        False  0001     01    B   0    P  \n1         True  0002     01    F   0    S  \n2        False  0003     01    A   0    S  \n3        False  0003     02    A   0    S  \n4         True  0004     01    F   1    S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>HomePlanet</th>\n      <th>CryoSleep</th>\n      <th>Cabin</th>\n      <th>Destination</th>\n      <th>Age</th>\n      <th>VIP</th>\n      <th>RoomService</th>\n      <th>FoodCourt</th>\n      <th>ShoppingMall</th>\n      <th>Spa</th>\n      <th>VRDeck</th>\n      <th>Name</th>\n      <th>Transported</th>\n      <th>group</th>\n      <th>number</th>\n      <th>deck</th>\n      <th>num</th>\n      <th>side</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0001_01</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>B/0/P</td>\n      <td>TRAPPIST-1e</td>\n      <td>39.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Maham Ofracculy</td>\n      <td>False</td>\n      <td>0001</td>\n      <td>01</td>\n      <td>B</td>\n      <td>0</td>\n      <td>P</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0002_01</td>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>24.0</td>\n      <td>False</td>\n      <td>109.0</td>\n      <td>9.0</td>\n      <td>25.0</td>\n      <td>549.0</td>\n      <td>44.0</td>\n      <td>Juanna Vines</td>\n      <td>True</td>\n      <td>0002</td>\n      <td>01</td>\n      <td>F</td>\n      <td>0</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0003_01</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>A/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>58.0</td>\n      <td>True</td>\n      <td>43.0</td>\n      <td>3576.0</td>\n      <td>0.0</td>\n      <td>6715.0</td>\n      <td>49.0</td>\n      <td>Altark Susent</td>\n      <td>False</td>\n      <td>0003</td>\n      <td>01</td>\n      <td>A</td>\n      <td>0</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0003_02</td>\n      <td>Europa</td>\n      <td>False</td>\n      <td>A/0/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>33.0</td>\n      <td>False</td>\n      <td>0.0</td>\n      <td>1283.0</td>\n      <td>371.0</td>\n      <td>3329.0</td>\n      <td>193.0</td>\n      <td>Solam Susent</td>\n      <td>False</td>\n      <td>0003</td>\n      <td>02</td>\n      <td>A</td>\n      <td>0</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0004_01</td>\n      <td>Earth</td>\n      <td>False</td>\n      <td>F/1/S</td>\n      <td>TRAPPIST-1e</td>\n      <td>16.0</td>\n      <td>False</td>\n      <td>303.0</td>\n      <td>70.0</td>\n      <td>151.0</td>\n      <td>565.0</td>\n      <td>2.0</td>\n      <td>Willy Santantines</td>\n      <td>True</td>\n      <td>0004</td>\n      <td>01</td>\n      <td>F</td>\n      <td>1</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Data Cleaning\n\n1. Drop\n2. mean, median imputation\n3. hot deck imputation\n4. regression imputation\n5. ML (kNN、decision tree、random forest) - similar with hot deck\n6. multiple imputation\n7. Create NA as a new class\n8. NA change to a number/class then create new feature\n(if we want to use multiple imputation in numeric data, we should bin the numeric to class type which base on our domain knowledge)\n\nNA \"insome sense random”\n\n>numeric data ：1、2、3、4、5、6\n>\n>categorical data ：1、2 (mode)、3、5、6。\n>\n>MCAR ：1 (not recommendate)、2、3、4、5\n>\n>MNAR ：6、7","metadata":{"id":"cxQja8DInK4C"}},{"cell_type":"code","source":"def logtrans_zero_replace(data):\n    return np.log(data+1e-5)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:20:12.069353Z","iopub.execute_input":"2024-06-03T12:20:12.069798Z","iopub.status.idle":"2024-06-03T12:20:12.074811Z","shell.execute_reply.started":"2024-06-03T12:20:12.069768Z","shell.execute_reply":"2024-06-03T12:20:12.073659Z"},"trusted":true},"execution_count":81,"outputs":[]},{"cell_type":"code","source":"def missing_value_compare(df, missing_column_name, numeric_column_names, categorical_column_names):\n    cols = 2  # Number of columns in the subplot grid\n    \n    # Plot for categorical columns\n    rows = len(categorical_column_names)\n    fig, axes = plt.subplots(rows, cols, figsize=(15, 5*rows))\n    \n    for i, categorical_feature in enumerate(categorical_column_names):\n        sns.countplot(data=df, x=categorical_feature, ax=axes[i, 0])\n        axes[i, 0].set_title(f'Count of {categorical_feature}')\n        axes[i, 0].set_ylabel('Counts')\n        \n        sns.countplot(data=df[~df[missing_column_name].isna()], x=categorical_feature, ax=axes[i, 1])\n        axes[i, 1].set_title(f'Count of {categorical_feature} without missing')\n        axes[i, 1].set_ylabel('Counts')\n\n    plt.tight_layout()\n    plt.show()\n    \n    # Plot for numeric columns\n    rows = len(numeric_column_names)\n    fig, axes = plt.subplots(rows, cols, figsize=(15, 5*rows))\n    \n    for i, numeric_feature in enumerate(numeric_column_names):\n        sns.histplot(x=logtrans_zero_replace(df[numeric_feature]), kde=True, ax=axes[i, 0])\n        axes[i, 0].set_title(f'Distribution of {numeric_feature}')\n        axes[i, 0].set_ylabel('Counts')\n        \n        sns.histplot(x=logtrans_zero_replace(df[~df[missing_column_name].isna()][numeric_feature]), kde=True, ax=axes[i, 1])\n        axes[i, 1].set_title(f'Distribution of {numeric_feature} without missing')\n        axes[i, 1].set_ylabel('Counts')\n\n    plt.tight_layout()\n    plt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:21:17.462389Z","iopub.execute_input":"2024-06-03T12:21:17.462814Z","iopub.status.idle":"2024-06-03T12:21:17.477010Z","shell.execute_reply.started":"2024-06-03T12:21:17.462783Z","shell.execute_reply":"2024-06-03T12:21:17.475662Z"},"trusted":true},"execution_count":85,"outputs":[]},{"cell_type":"markdown","source":"The missing value are lower than 3% of all data in every features, so it is hard to distinguish the pattern from visulization.","metadata":{}},{"cell_type":"code","source":"origin_df.isna().apply(sum, axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T11:27:38.251362Z","iopub.execute_input":"2024-06-03T11:27:38.251875Z","iopub.status.idle":"2024-06-03T11:27:38.300244Z","shell.execute_reply.started":"2024-06-03T11:27:38.251831Z","shell.execute_reply":"2024-06-03T11:27:38.299043Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"PassengerId       0\nHomePlanet      201\nCryoSleep       217\nCabin           199\nDestination     182\nAge             179\nVIP             203\nRoomService     181\nFoodCourt       183\nShoppingMall    208\nSpa             183\nVRDeck          188\nName            200\nTransported       0\ngroup             0\nnumber            0\ndeck            199\nnum             199\nside            199\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"origin_df.isna().apply(sum, axis=0)/8693","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:23:37.495873Z","iopub.execute_input":"2024-06-03T12:23:37.496933Z","iopub.status.idle":"2024-06-03T12:23:37.546069Z","shell.execute_reply.started":"2024-06-03T12:23:37.496884Z","shell.execute_reply":"2024-06-03T12:23:37.545016Z"},"trusted":true},"execution_count":87,"outputs":[{"execution_count":87,"output_type":"execute_result","data":{"text/plain":"PassengerId     0.000000\nHomePlanet      0.023122\nCryoSleep       0.024963\nCabin           0.022892\nDestination     0.020936\nAge             0.020591\nVIP             0.023352\nRoomService     0.020821\nFoodCourt       0.021051\nShoppingMall    0.023927\nSpa             0.021051\nVRDeck          0.021627\nName            0.023007\nTransported     0.000000\ngroup           0.000000\nnumber          0.000000\ndeck            0.022892\nnum             0.022892\nside            0.022892\ndtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"clean_df = origin_df.dropna()","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:27:16.508242Z","iopub.execute_input":"2024-06-03T12:27:16.508760Z","iopub.status.idle":"2024-06-03T12:27:16.531139Z","shell.execute_reply.started":"2024-06-03T12:27:16.508724Z","shell.execute_reply":"2024-06-03T12:27:16.529876Z"},"trusted":true},"execution_count":88,"outputs":[]},{"cell_type":"markdown","source":"### Double Check Cleaned Data","metadata":{"id":"TKgsk6rbnK4C"}},{"cell_type":"code","source":"clean_df.isna().apply(sum, axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-06-03T12:27:46.742044Z","iopub.execute_input":"2024-06-03T12:27:46.742454Z","iopub.status.idle":"2024-06-03T12:27:46.780096Z","shell.execute_reply.started":"2024-06-03T12:27:46.742424Z","shell.execute_reply":"2024-06-03T12:27:46.778959Z"},"trusted":true},"execution_count":89,"outputs":[{"execution_count":89,"output_type":"execute_result","data":{"text/plain":"PassengerId     0\nHomePlanet      0\nCryoSleep       0\nCabin           0\nDestination     0\nAge             0\nVIP             0\nRoomService     0\nFoodCourt       0\nShoppingMall    0\nSpa             0\nVRDeck          0\nName            0\nTransported     0\ngroup           0\nnumber          0\ndeck            0\nnum             0\nside            0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"-----","metadata":{"id":"zMT7VYw4nK4D"}},{"cell_type":"markdown","source":"# Data Analysis","metadata":{"id":"rCv7BmfgnK4D"}},{"cell_type":"markdown","source":"## Exploratory","metadata":{"id":"f6bvFLfYnK4D"}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Inference","metadata":{"id":"6CIqIcjPnK4D"}},{"cell_type":"markdown","source":"## Feature Selection","metadata":{"id":"UbWDF1KcnK4E"}},{"cell_type":"markdown","source":"-----","metadata":{"id":"wCvxwKyZnK4E"}},{"cell_type":"markdown","source":"# Split Training and Testing Data","metadata":{"id":"EpdD4qYxnK4E"}},{"cell_type":"markdown","source":"-----","metadata":{"id":"1cESlh8DnK4E"}},{"cell_type":"markdown","source":"# Model Data - 1","metadata":{"id":"B2ft2RIJnK4E"}},{"cell_type":"markdown","source":"----","metadata":{"id":"wPCo72mmnK4E"}},{"cell_type":"markdown","source":"## Model + Processing_2 -","metadata":{"id":"vpKtInDWnK4E"}},{"cell_type":"markdown","source":"### Training","metadata":{"id":"I0pWEVrSnK4E"}},{"cell_type":"markdown","source":"### Evaluate Model Performance","metadata":{"id":"4VPDcDLEnK4E"}},{"cell_type":"markdown","source":"### Tune Model - Hyper-Parameters","metadata":{"id":"-A08pUD1nK4E"}},{"cell_type":"markdown","source":"### Tune Model - Feature Selection","metadata":{"id":"Sl71xQVMnK4F"}},{"cell_type":"markdown","source":"---","metadata":{"id":"07RcdMQ-nK4F"}},{"cell_type":"markdown","source":"## Model + Processing_2 -","metadata":{"id":"e6bpW8_-nK4F"}},{"cell_type":"markdown","source":"---","metadata":{"id":"pi6DKqL5nK4F"}},{"cell_type":"markdown","source":"# Conclusion","metadata":{"id":"BHatYHlOnK4F"}},{"cell_type":"markdown","source":"---","metadata":{"id":"UdzLFO6JnK4F"}},{"cell_type":"markdown","source":"# Optimize and Strategize","metadata":{"id":"vNhzbRw1nK4F"}},{"cell_type":"markdown","source":"-----","metadata":{"id":"AyJcYJk4nK4F"}},{"cell_type":"markdown","source":"# Log","metadata":{"id":"1R8ByCjbnK4F"}},{"cell_type":"code","source":"","metadata":{"id":"y_Tt1z4rnK4F"},"execution_count":null,"outputs":[]}]}